[{"title":"App Bundle","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle","content":"","keywords":""},{"title":"Default​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#default","content":"By default this command will build the project with the release version staging flavor. gits build appbundle  After the building process is complete, we can check the .abb file in the build/app/outputs/appbundle/ and build/app/outputs/flutter-appbundle/ "},{"title":"Options :​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#options-","content":"gits build appbundle [flavor/environment] [app_version] [custom_target] [build_number] [build_name] [[no-]obfuscate] [split-debug-info]  Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tBuild project on dev environment (Default) -f stag\t--flavor stag\tBuild project on staging environment -f prod\t--flavor prod\tBuild project on production environment App Version : App Version\tDescription--debug\tBuild project on debug mode (Default) --profile\tBuild project on profile mode --release\tBuild project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [url_file]\t--target [url_file]\tThis command is used to build the application in a specific file, by default it will run the lib/main.dart file. Custom Build Name : Build Name\tDescription--build-name [build_number]\tThis command is used to build application with a specific name. Custom Build Number : Build Number\tDescription--build-number [build_number]\tThis command is used to build application with a specific version number. No Obfuscate : Build Number\tDescription--[no-]obfuscate\tIn a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with &quot;--split-debug-info&quot; option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. (defaults to on) Split Debug Info : Build Number\tDescription--split-debug-info\tIn a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with &quot;--analyze-size&quot;. (defaults to &quot;./.symbols/&quot;) "},{"title":"Example - Custom Version​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#example---custom-version","content":"Debug Version gits build appbundle --debug Profile Version gits build appbundle --profile Release Version gits build appbundle --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#example---custom-environmentflavor","content":"Dev Environment gits build appbundle -f dev Alternative: gits build appbundle --flavor dev Staging Environment gits build appbundle -f dev Alternative: gits build appbundle --flavor dev Production Environment gits build appbundle -f dev Alternative: gits build appbundle --flavor dev  "},{"title":"Example - Custom Version and Environment Combination​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#example---custom-version-and-environment-combination","content":"gits build appbundle --release -f prod  "},{"title":"Example - Custom Target​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#example---custom-target","content":"gits build appbundle --target [url_file *optional]  Alternative: gits build appbundle --t [url_file *optional]  "},{"title":"Example - Custom gits.yaml​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#example---custom-gitsyaml","content":"gits build appbundle --gits-yaml [custom_path]  "},{"title":"Example - Custom Build Number​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#example---custom-build-number","content":"gits build appbundle --build-number [build_number]  For example, we create an appbundle file with the custom build number 1.0.0 gits build appbundle --build-number 1.0.0  "},{"title":"Example - Custom Build Name​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#example---custom-build-name","content":"gits build appbundle --build-name [build_name]  For example, we create an appbundle file with the name application_release gits build appbundle --build-name application_release  "},{"title":"Example - No Obfuscate​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#example---no-obfuscate","content":"gits build appbundle --[no-]obfuscate  "},{"title":"Example - Split Debug Info​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/android/app_bundle#example---split-debug-info","content":"gits build appbundle --split-debug-info  "},{"title":"APK File Format","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk","content":"","keywords":""},{"title":"Default​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#default","content":"By default this command will build the project with the release version staging flavor. gits build apk  After the building process is complete, we can check the .apk file in the build/app/outputs/apk/ and build/app/outputs/flutter-apk/ folders. "},{"title":"Options :​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#options-","content":"gits build apk [flavor/environment] [app_version] [custom_target] [build_number] [build_name] [[no-]obfuscate] [split-debug-info]  Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tBuild project on dev environment (Default) -f stag\t--flavor stag\tBuild project on staging environment -f prod\t--flavor prod\tBuild project on production environment App Version : App Version\tDescription--debug\tBuild project on debug mode (Default) --profile\tBuild project on profile mode --release\tBuild project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [url_file]\t--target [url_file]\tThis command is used to build the application in a specific file, by default it will run the lib/main.dart file. Custom Build Name : Build Name\tDescription--build-name [build_number]\tThis command is used to build application with a specific name. Custom Build Number : Build Number\tDescription--build-number [build_number]\tThis command is used to build application with a specific version number. No Obfuscate : Build Number\tDescription--[no-]obfuscate\tIn a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with &quot;--split-debug-info&quot; option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. (defaults to on) Split Debug Info : Build Number\tDescription--split-debug-info\tIn a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with &quot;--analyze-size&quot;. (defaults to &quot;./.symbols/&quot;) "},{"title":"Example - Custom Version​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#example---custom-version","content":"Debug Version gits build apk --debug Profile Version gits build apk --profile Release Version gits build apk --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#example---custom-environmentflavor","content":"Dev Environment gits build apk -f dev Alternative: gits build apk --flavor dev Staging Environment gits build apk -f dev Alternative: gits build apk --flavor dev Production Environment gits build apk -f dev Alternative: gits build apk --flavor dev  "},{"title":"Example - Custom Version and Environment Combination​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#example---custom-version-and-environment-combination","content":"gits build apk --release -f prod  "},{"title":"Example - Custom Target​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#example---custom-target","content":"gits build apk --target [url_file *optional]  Alternative: gits build apk --t [url_file *optional]  "},{"title":"Example - Custom gits.yaml​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#example---custom-gitsyaml","content":"gits build apk --gits-yaml [custom_path]  "},{"title":"Example - Custom Build Number​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#example---custom-build-number","content":"gits build apk --build-number [build_number]  For example, we create an apk file with the custom build number 1.0.0 gits build apk --build-number 1.0.0  "},{"title":"Example - Custom Build Name​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#example---custom-build-name","content":"gits build apk --build-name [build_name]  For example, we create an apk file with the name application_release gits build apk --build-name application_release  "},{"title":"Example - No Obfuscate​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#example---no-obfuscate","content":"gits build apk --[no-]obfuscate  "},{"title":"Example - Split Debug Info​","type":1,"pageTitle":"APK File Format","url":"/gits_cli_documentation/docs/gits_cli/build/android/apk#example---split-debug-info","content":"gits build apk --split-debug-info  "},{"title":"IPA File Format","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa","content":"","keywords":""},{"title":"Default​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#default","content":"By default this command will build the project with the release version staging flavor. gits build ipa  After the building process is complete, we can check the .ipa file in the build/ios/ipa/ or we can use the archive file in build/ios/archive/ folders. "},{"title":"Options :​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#options-","content":"gits build ipa [flavor/environment] [app_version] [custom_target] [build_number] [build_name] [[no-]obfuscate] [split-debug-info]  Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tBuild project on dev environment (Default) -f stag\t--flavor stag\tBuild project on staging environment -f prod\t--flavor prod\tBuild project on production environment App Version : App Version\tDescription--debug\tBuild project on debug mode (Default) --profile\tBuild project on profile mode --release\tBuild project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [url_file]\t--target [url_file]\tThis command is used to build the application in a specific file, by default it will run the lib/main.dart file. Custom Build Name : Build Name\tDescription--build-name [build_number]\tThis command is used to build application with a specific name. Custom Build Number : Build Number\tDescription--build-number [build_number]\tThis command is used to build application with a specific version number. No Obfuscate : Build Number\tDescription--[no-]obfuscate\tIn a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with &quot;--split-debug-info&quot; option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. (defaults to on) Split Debug Info : Build Number\tDescription--split-debug-info\tIn a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with &quot;--analyze-size&quot;. (defaults to &quot;./.symbols/&quot;) "},{"title":"Example - Custom Version​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#example---custom-version","content":"Debug Version gits build ipa --debug Profile Version gits build ipa --profile Release Version gits build ipa --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#example---custom-environmentflavor","content":"Dev Environment gits build ipa -f dev Alternative: gits build ipa --flavor dev Staging Environment gits build ipa -f dev Alternative: gits build ipa --flavor dev Production Environment gits build ipa -f dev Alternative: gits build ipa --flavor dev  "},{"title":"Example - Custom Version and Environment Combination​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#example---custom-version-and-environment-combination","content":"gits build ipa --release -f prod  "},{"title":"Example - Custom Target​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#example---custom-target","content":"gits build ipa --target [url_file *optional]  Alternative: gits build ipa --t [url_file *optional]  "},{"title":"Example - Custom gits.yaml​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#example---custom-gitsyaml","content":"gits build ipa --gits-yaml [custom_path]  "},{"title":"Example - Custom Build Number​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#example---custom-build-number","content":"gits build ipa --build-number [build_number]  For example, we create an ipa file with the custom build number 1.0.0 gits build ipa --build-number 1.0.0  "},{"title":"Example - Custom Build Name​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#example---custom-build-name","content":"gits build ipa --build-name [build_name]  For example, we create an ipa file with the name application_release gits build ipa --build-name application_release  "},{"title":"Example - No Obfuscate​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#example---no-obfuscate","content":"gits build ipa --[no-]obfuscate  "},{"title":"Example - Split Debug Info​","type":1,"pageTitle":"IPA File Format","url":"/gits_cli_documentation/docs/gits_cli/build/ios/ipa#example---split-debug-info","content":"gits build ipa --split-debug-info  "},{"title":"App Bundle","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle","content":"","keywords":""},{"title":"Default​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#default","content":"By default this command will build the project with the release version staging flavor. gits build ios  After the building process is complete, we can check the .ipa file in the build/ios/ipa/ or we can use the archive file in build/ios/archive/ folders. "},{"title":"Options :​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#options-","content":"gits build ios [flavor/environment] [app_version] [custom_target] [build_number] [build_name] [[no-]obfuscate] [split-debug-info]  Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tBuild project on dev environment (Default) -f stag\t--flavor stag\tBuild project on staging environment -f prod\t--flavor prod\tBuild project on production environment App Version : App Version\tDescription--debug\tBuild project on debug mode (Default) --profile\tBuild project on profile mode --release\tBuild project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [url_file]\t--target [url_file]\tThis command is used to build the application in a specific file, by default it will run the lib/main.dart file. Custom Build Name : Build Name\tDescription--build-name [build_number]\tThis command is used to build application with a specific name. Custom Build Number : Build Number\tDescription--build-number [build_number]\tThis command is used to build application with a specific version number. No Obfuscate : Build Number\tDescription--[no-]obfuscate\tIn a release build, this flag removes identifiers and replaces them with randomized values for the purposes of source code obfuscation. This flag must always be combined with &quot;--split-debug-info&quot; option, the mapping between the values and the original identifiers is stored in the symbol map created in the specified directory. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. (defaults to on) Split Debug Info : Build Number\tDescription--split-debug-info\tIn a release build, this flag reduces application size by storing Dart program symbols in a separate file on the host rather than in the application. The value of the flag should be a directory where program symbol files can be stored for later use. These symbol files contain the information needed to symbolize Dart stack traces. For an app built with this flag, the &quot;flutter symbolize&quot; command with the right program symbol file is required to obtain a human readable stack trace. This flag cannot be combined with &quot;--analyze-size&quot;. (defaults to &quot;./.symbols/&quot;) "},{"title":"Example - Custom Version​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#example---custom-version","content":"Debug Version gits build ios --debug Profile Version gits build ios --profile Release Version gits build ios --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#example---custom-environmentflavor","content":"Dev Environment gits build ios -f dev Alternative: gits build ios --flavor dev Staging Environment gits build ios -f dev Alternative: gits build ios --flavor dev Production Environment gits build ios -f dev Alternative: gits build ios --flavor dev  "},{"title":"Example - Custom Version and Environment Combination​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#example---custom-version-and-environment-combination","content":"gits build ios --release -f prod  "},{"title":"Example - Custom Target​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#example---custom-target","content":"gits build ios --target [url_file *optional]  Alternative: gits build ios --t [url_file *optional]  "},{"title":"Example - Custom gits.yaml​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#example---custom-gitsyaml","content":"gits build ios --gits-yaml [custom_path]  "},{"title":"Example - Custom Build Number​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#example---custom-build-number","content":"gits build ios --build-number [build_number]  For example, we create an appbundle file with the custom build number 1.0.0 gits build ios --build-number 1.0.0  "},{"title":"Example - Custom Build Name​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#example---custom-build-name","content":"gits build ios --build-name [build_name]  For example, we create an appbundle file with the name application_release gits build ios --build-name application_release  "},{"title":"Example - No Obfuscate​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#example---no-obfuscate","content":"gits build ios --[no-]obfuscate  "},{"title":"Example - Split Debug Info​","type":1,"pageTitle":"App Bundle","url":"/gits_cli_documentation/docs/gits_cli/build/ios/app_bundle#example---split-debug-info","content":"gits build ios --split-debug-info  "},{"title":"Pre Build Ios","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/build/prebuild/ios","content":"","keywords":""},{"title":"Generate Results​","type":1,"pageTitle":"Pre Build Ios","url":"/gits_cli_documentation/docs/gits_cli/build/prebuild/ios#generate-results","content":"There are 3 files that will be generated from this ios prebuild: ios/fastlane/Appfileios/Runner.xcodeproj/project.pbxprojios/ExportOptions.plist "},{"title":"Options​","type":1,"pageTitle":"Pre Build Ios","url":"/gits_cli_documentation/docs/gits_cli/build/prebuild/ios#options","content":"Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tPre Build project on dev environment (Default) -f stag\t--flavor stag\tPre Build project on staging environment -f prod\t--flavor prod\tPre Build project on production environment "},{"title":"Migration​","type":1,"pageTitle":"Pre Build Ios","url":"/gits_cli_documentation/docs/gits_cli/build/prebuild/ios#migration","content":"To migrate from previous version just add the file ios/deployment/appstore_deployment.json which was described earlier then in .gitlab-ci.yml .gitlab-ci.yml .build-ios: stage: build_ios resource_group: build_and_deploy_ios allow_failure: false script: # Get version name &amp; build number from tag - IFS='-' # Read the split words into an array based on dash delimiter. - read -a strarr &lt;&lt;&lt; &quot;$CI_COMMIT_TAG&quot; - VERSION_NAME=${strarr[1]} - BUILD_NUMBER=${strarr[2]} # Setup key ios - - echo &quot;$APP_STORE_JSON&quot; &gt; &quot;$PATH_APP_STORE_JSON&quot; + - gits_cli prebuild ios -f ${CI_ENVIRONMENT_NAME} # Change working directory to ios - cd ios # Set up code signing settings on Xcode project. - chmod +x deployment/provisioning.sh - ./deployment/provisioning.sh - pod install --repo-update # Change working directory to root - cd .. # Build ipa - gits_cli build ipa -f ${CI_ENVIRONMENT_NAME} --build-number=$BUILD_NUMBER --build-name=$VERSION_NAME --export-options-plist=&quot;$PATH_EXPORT_OPTIONS_PLISTS&quot; # artifacts: # If you want to generate artifacts, uncomment this script. # paths: # - $PATH_IPA  "},{"title":"Help","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/general/help","content":"Help This command is used to view the list contained in the CLI. gits -h Alternative: gits --help Output Get it simple command flutter with Gits CLI Usage: gits &lt;command&gt; [arguments] Global options: -h, --help Print this usage information. -v, --version Reports the version of this tool. Available commands: Build build Build an app to android or ios Generate api Create a new api in page. assets Generate assets from setup assets pubspec.yaml. config Generate launch.json &amp; tasks.json related with config. core Create a new core packages module. endpoint Generate endpoint from json2dart.yaml. feature Create a new feature module. firebase Generate google service both android &amp; ios. json2dart Generate dart data class from json. l10n Generate localizations for the current project. page Create a new page in feature module. unit-test Create a new unit test for page in feature module. Project analyze Analyze code in all packages. clean Delete the l10n, build/ and .dart_tool/ in main, core &amp; features directories. coverage Run Flutter test coverage for the current project &amp; all modules. create Create flutter application with Gits Flutter Starter Kit cucumber Generate integration test from gherkin in .feature drive Run integration tests for the project on an attached device or emulator. format Format all files .dart. get Get packages in a Flutter project, Core &amp; Features. refactor Refactor naming old to new naming run Run your Flutter app on an attached device with flavor. test Run Flutter unit tests for the current project &amp; all modules. test-drive Run all integration tests for the project on an attached device or emulator. upgrade Upgrade the current package's dependencies to latest versions.. Tools changelog get latest changelog doctor Show information about the installed tooling. init Init a new project from starter kit ","keywords":""},{"title":"Version","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/general/version","content":"Version This command is used to check the CLI version. gits -v Alternative: gits --version Output Gits CLI 3.0.0 ","keywords":""},{"title":"Changelog","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/changelog/","content":"","keywords":""},{"title":"3.3.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#331","content":"fix: add flag generate for dart3 in core and feature "},{"title":"3.3.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#330","content":"build: bump dependency versionchore: support dart &gt;=2.19.0 &lt;4.0.0 and flutter 3.7.0fix(api_command): cast() to map() regenerate to map&lt;String, String&gt;fix: new .gitignore and minimal version dart and flutterfix(local2dart): dirname for database path "},{"title":"3.2.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#320","content":"fix(feature): remove unused directory after create featurefix(login2dart): major issue local2dartfix(local2dart): seed change keys to column and json serialize support with joinfeat(local2dart): add generate custom queryfeat(local2dart): add generate view "},{"title":"3.1.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#310","content":"feat(unused-l10n): add new command check unused key on .arbfeat(local2dart): add new command generate local2dart yaml to sqflitefix: remove call format before build and runfix(api_command): separator in locator in windowsfeat(remove-page): add new command for remove pagefeat(remove-feature): add new command for remove featurefix: replace path gits.yaml with separator each platform "},{"title":"3.0.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#301","content":"fix(feature_commnad): add default uses-material-design: true in create pubspec.yamlfix(test_command): add test for main featurefix(doctor_command): flutter doctor now check gherkin and lcovfix: add stdout and argument --no-pub in gits modular helper "},{"title":"3.0.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#300","content":"feat!: break change remove dependency melosfeat: add gits modular helper for change dependency to melos "},{"title":"2.19.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2190","content":"feat: add new command cucumber for support integration test with gherkin languagefix: delete ndjson_gherkin.json in integration_test in developmen &amp; release "},{"title":"2.18.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2180","content":"feat: add path for config in pubspec.yaml for gits_clifeat(test): add spesific test for feature "},{"title":"2.17.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2170","content":"fix(page): issue create page in skeleton or ui create directory bloc with name of pagefeat(build): add argument for qa build application integration test purposefix(changelog): remove show version and trim string changelog "},{"title":"2.16.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2160","content":"add parameter exclude in command refactoradd parameter exclude and refactoring methodremove unused directory after create core modulremove unused directory after create feature moduladd refactor include library with additonal flag command --include-libraryadd create with refactor include library with additonal flag command --include-library "},{"title":"2.15.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2150","content":"generate naming from project name in asset, endpoint, config, json2dart, api, init, unit-test and pageadd refactor command for rename file and content in fileadd flag option refactor on create command. default set false "},{"title":"2.14.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2140","content":"add create command for create flutter apps with Gits Flutter Starter Kit "},{"title":"2.13.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2131","content":"fix json2dart initializeDateFormatting setUp in body, response &amp; datasource unit test "},{"title":"2.13.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2130","content":"add json2dart generate with cache strategy "},{"title":"2.12.2​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2122","content":"refactor package name from gits_cli to gits "},{"title":"2.12.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2121","content":"remove dependency arb_utilsadd arb helper to change dependency arb_utils "},{"title":"2.12.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2120","content":"support l10n to separate file with dir name for localization e.g en, id, esfix datetime tryparse with non nullable valueadd generate builder function in abstract class blocfix when generate page directory bloc with page name is remove "},{"title":"2.11.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2111","content":"fix(json2dart): separate method to formatDateTime for Body and Response "},{"title":"2.11.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2110","content":"add generate when function in abstact class blocadd generate json2dart with replace mode "},{"title":"2.10.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2101","content":"fix json2dart generate model body with datetime import core "},{"title":"2.10.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#2100","content":"add get lastest changelog command with gits changelog "},{"title":"2.9.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#291","content":"fix generate json2dart legacy without config "},{"title":"2.9.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#290","content":"fix generate l10n before buildfix format date time for body &amp; response can set default per apiadd generate config vscode for profile mode &amp; release modeadd driver command for run integration testadd test driver command for run all integration test via test_driver.yaml "},{"title":"2.8.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#280","content":"add json2dart configuration default format date timeadd customization directory for assets "},{"title":"2.7.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#271","content":"fix issue generate endpoint duplicate with same path "},{"title":"2.7.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#270","content":"support body &amp; response list json to generate with json2dart "},{"title":"2.6.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#261","content":"add // ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables in generate unit test json2dart "},{"title":"2.6.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#260","content":"add generate http header with json2dart "},{"title":"2.5.5​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#255","content":"fix generate json2dart for method multipart "},{"title":"2.5.4​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#254","content":"fix coverage if directory test is empty "},{"title":"2.5.3​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#253","content":"fix on error command just exit with status 1 "},{"title":"2.5.2​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#252","content":"fix generate body model constructor &amp; toMap()fix unit test generate model for variable DateTimefix handle int &amp; double for set tryParse in generate fromMap() "},{"title":"2.5.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#251","content":"fix generate endpoint for spesific url "},{"title":"2.5.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#250","content":"add path to regex packagehandle endpoint for param path to regex e.g /user/:id "},{"title":"2.4.3​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#243","content":"fix run command default run in mode debug "},{"title":"2.4.2​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#242","content":"fix generate assets name variable to camelCase "},{"title":"2.4.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#241","content":"fix generate locator page command "},{"title":"2.4.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#240","content":"add argument obfuscate &amp; split-debug-info for build command "},{"title":"2.3.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#231","content":"fix generate json2dart unit test data model duplicate class "},{"title":"2.3.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#230","content":"fix generate json2dart complex json duplicate keyfeat add generate unit test from json2dart "},{"title":"2.2.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#220","content":"add status generated in category generatedadd asset command "},{"title":"2.1.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#211","content":"fix generate mapper json2dartfix duplicate class name json2dart "},{"title":"2.1.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#210","content":"add endpoint commandadd arguments json2dart command "},{"title":"2.0.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#200","content":"add json2dart commandgenerate model from json from json2dartgenerate data layer from json2dartgenerate domain layer from json2dartgenerate bloc from json2dartgenerate locator &amp; mapper from json2dartgenerate constants GitsEndpoints from json2dartadd new argument in api commandfix issue api commandadd collection dependency "},{"title":"1.7.3​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#173","content":"add remove file coverage *_state.dart, *_event.dart, **/locator.dart, core/lib/src/test/*, lib/routes/routes.dart "},{"title":"1.7.2​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#172","content":"fix gits clean command add remove ios Podfile.lock "},{"title":"1.7.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#171","content":"fix conflict build ipa argument export-method &amp; export-options-plists "},{"title":"1.7.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#170","content":"add build ios commandadd argument version for build command "},{"title":"1.6.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#161","content":"fix issue path with whitespace "},{"title":"1.6.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#160","content":"add analyze command "},{"title":"1.5.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#150","content":"add support ci/cd argument gits.yamlfix run melos coverage "},{"title":"1.4.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#141","content":"fix issue run or build with firebase flavor "},{"title":"1.4.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#140","content":"add firebase commandseparated android &amp; ios application id in gits.yamlexecute firebase flavor before run &amp; build "},{"title":"1.3.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#131","content":"add config coverage to gits.yaml "},{"title":"1.3.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#130","content":"add coverage commandadd status command in every end of commandadd directory &amp; file in .gitignorerefactor init melosadd generate unhandle exception in data repository unit test "},{"title":"1.2.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#120","content":"add generate page just ui with cubitvalidate all replace file is exists, if not exists create file "},{"title":"1.1.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#111","content":"fix upgrade command flag "},{"title":"1.1.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#110","content":"add upgrade command "},{"title":"1.0.5​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#105","content":"fix call flutter.bat for support windows "},{"title":"1.0.4​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#104","content":"fix validate command "},{"title":"1.0.3​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#103","content":"fix generate apifix config command "},{"title":"1.0.2​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#102","content":"validate exists file gits.yaml &amp; melos.yaml "},{"title":"1.0.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#101","content":"fix initial version "},{"title":"1.0.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/gits_cli/changelog/#100","content":"Initial version. "},{"title":"API","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/api","content":"API This command is used to generate the API on a page gits api [api_name] -p [page_name] -f [feature_name] for the example we will generate an API named get_users on the feature master's users page. gits api get_users -p users -f master info Generated folders/files: ModelsEntitiesDatasourceRepositoriesUseCaseBLoC Customize models and entities, and add the end-points and BLoC to our cubit manually. tip Use the json to dart feature for more complete generated results, please check the following link Json2Dart caution API will not be generated if: The feature that we enter does not existThe page we entered does not existThe API name we entered already exists","keywords":""},{"title":"Config","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/config","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Config","url":"/gits_cli_documentation/docs/gits_cli/generate/config#options","content":"gits config [arguments]  To see all available options and flags, run gits config --help. "},{"title":"Available Options​","type":1,"pageTitle":"Config","url":"/gits_cli_documentation/docs/gits_cli/generate/config#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. Custom Target : Custom Target\tAlternative\tDescription-t [path_file]\t--target [path_file]\tThis command is used to run the application in a specific file, by default it will run the lib/main.dart file. "},{"title":"Assets","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/assets","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Assets","url":"/gits_cli_documentation/docs/gits_cli/generate/assets#options","content":"gits assets [arguments]  To see all available options and flags, run gits assets --help. "},{"title":"Available Options​","type":1,"pageTitle":"Assets","url":"/gits_cli_documentation/docs/gits_cli/generate/assets#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. "},{"title":"Custom Package","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/core","content":"Custom Package This command is used if we want to add a custom package to core. gits core [package_name] for the example of adding the snackbar package: gits core snackbar We can check the generated results in core/lib/packages/snackbar.","keywords":""},{"title":"Endpoint","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/endpoint","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Endpoint","url":"/gits_cli_documentation/docs/gits_cli/generate/endpoint#options","content":"gits endpoint [arguments]  To see all available options and flags, run gits endpoint --help. "},{"title":"Available Options​","type":1,"pageTitle":"Endpoint","url":"/gits_cli_documentation/docs/gits_cli/generate/endpoint#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. "},{"title":"Feature","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/feature","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Feature","url":"/gits_cli_documentation/docs/gits_cli/generate/feature#example","content":"For the example we will generate a new feature named master gits feature master  The feature master folder will be created automatically, we can check in features/master/  caution The feature will not be generated if the feature name we enter already exists. "},{"title":"Options​","type":1,"pageTitle":"Feature","url":"/gits_cli_documentation/docs/gits_cli/generate/feature#options","content":"gits feature [feature_name] [arguments]  To see all available options and flags, run gits feature --help. "},{"title":"Available Options​","type":1,"pageTitle":"Feature","url":"/gits_cli_documentation/docs/gits_cli/generate/feature#available-options","content":"Flags :  Flags\tAlternative\tDescription-p\t--page\tCreate a new feature module with page as same name. -a\t--all\tCreate a new feature module with page as same name and unittest as same name. "},{"title":"Firebase","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/firebase","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Firebase","url":"/gits_cli_documentation/docs/gits_cli/generate/firebase#options","content":"gits firebase [arguments]  To see all available options and flags, run gits firebase --help. "},{"title":"Available Options​","type":1,"pageTitle":"Firebase","url":"/gits_cli_documentation/docs/gits_cli/generate/firebase#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tRun project on dev environment (Default) -f stag\t--flavor stag\tRun project on staging environment -f prod\t--flavor prod\tRun project on production environment "},{"title":"l10n (Languages)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/l10n","content":"","keywords":""},{"title":"Single .arb​","type":1,"pageTitle":"l10n (Languages)","url":"/gits_cli_documentation/docs/gits_cli/generate/l10n#single-arb","content":"We can create multilingual systems with single .arb  "},{"title":"Spesific .arb​","type":1,"pageTitle":"l10n (Languages)","url":"/gits_cli_documentation/docs/gits_cli/generate/l10n#spesific-arb","content":"We can create multilingual systems with specific .arb based on our features for easy maintenance with this structure:  caution We are unable to combine single and specific.arb ! "},{"title":"Generate The Languages​","type":1,"pageTitle":"l10n (Languages)","url":"/gits_cli_documentation/docs/gits_cli/generate/l10n#generate-the-languages","content":"This command is used to generate the l10n file at the path assets/assets/l1on/ so that we can use it in the project. gits l10n  tip Use this command when there is a change in the l10n file.Especially for vscode users, to make it easier to process l10n files, we can use the extension i10n arb editor, don't forget to save and use the command above after making changes. (This tips only works for non spesific .arb or single .arb file) "},{"title":"Options​","type":1,"pageTitle":"l10n (Languages)","url":"/gits_cli_documentation/docs/gits_cli/generate/l10n#options","content":"gits l10n [arguments]  To see all available options and flags, run gits l10n --help. "},{"title":"Available Options​","type":1,"pageTitle":"l10n (Languages)","url":"/gits_cli_documentation/docs/gits_cli/generate/l10n#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. "},{"title":"Json2Dart","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/json2dart","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Json2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/json2dart#options","content":"gits json2dart [arguments]  To see all available options and flags, run gits json2dart --help. "},{"title":"Available Options​","type":1,"pageTitle":"Json2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/json2dart#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. Specific Feature :  Specific Feature\tAlternative\tDescription-f [feature-name]\t--feature-name [feature-name]\tGenerate json2dart spesific feature which has been registered in json2dart/json2dart.yaml Specific Page :  Specific Page\tAlternative\tDescription-p [page-name]\t--page-name [page-name]\tGenerate json2dart spesific page which has been registered in json2dart/json2dart.yaml must include --feature-name option Flags : App Version\tDescription--[no-]nullable\tSet generated variable to nullable. (defaults to on) --[no-]equatable\tSet generated extends class with Equatable. (defaults to on) --[no-]final\tSet generated variable to final. (defaults to on) --[no-]required\tSet generated variable constructor to required. (defaults to on) --[no-]api\tSet generated models with implement api. (defaults to on) --[no-]unit-test\tGenerate unit test for api implementation. (defaults to on) --[no-]endpoint\tGenerate endpoint from path json2dart.yaml. (defaults to on) --[no-]replace\tReplace value generated. if set to false will be delete all directory generated json2dart before. (defaults to on) "},{"title":"Page","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/page","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Page","url":"/gits_cli_documentation/docs/gits_cli/generate/page#example","content":"Here's an example of how you can use the gits page command to create a new page in the users feature module, with the feature name set to master: gits page users -f master  As you can see, the command has generated the following files and folders in the users feature module: lib/users/presentation/cubit/users_cubit.dart: The Cubit file for the new page.lib/users/presentation/pages/users_page.dart: The UI page file for the new page.lib/users/presentation/widgets/.gitkeep: An empty file to preserve the widgets folder.lib/users/locator.dart: The locator file for the users feature module.lib/locator.dart: The main locator file for the entire project. With these files and folders generated, you can now start adding your own code to create the new page in the users feature module.  caution Page will not be generated if: The feature that we enter does not existThe page name we entered already exists "},{"title":"Options​","type":1,"pageTitle":"Page","url":"/gits_cli_documentation/docs/gits_cli/generate/page#options","content":"gits page [page-name] [arguments]  To see all available options and flags, run gits page --help. "},{"title":"Available Options​","type":1,"pageTitle":"Page","url":"/gits_cli_documentation/docs/gits_cli/generate/page#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. Specific Feature :  Specific Feature\tAlternative\tDescription-f [feature-name]\t--feature-name [feature-name]\tSpecifies the name of the feature for which the page is being created. This option is mandatory. Flags : Flags\tDescription--ui\tSpecifies that the page should be created with just UI pages and Cubit for state management. This option is on by default. --api\tSpecifies that the page should be created with implementation of the API with the same name. --skeleton\tSpecifies that the page should be created with just the directory structure. --unit-test\tSpecifies that the page should be created with a unit test. This will create a new page in the specified feature module with the necessary files and folders for UI pages and Cubit for state management. Note that the --api, --skeleton, and --unit-test options are mutually exclusive. You can only use one of these options at a time. Also, the --ui option is on by default, so if you don't specify any options, a new page will be created with just UI pages and Cubit. "},{"title":"Remove Feature","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/remove-feature","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Remove Feature","url":"/gits_cli_documentation/docs/gits_cli/generate/remove-feature#example","content":"For the example we will remove feature master gits remove-feature master  for the feature master in the project will be deleted safely without the need to manually remove dependencies and locators that have been generated previously. "},{"title":"Remove Page","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/remove-page","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Remove Page","url":"/gits_cli_documentation/docs/gits_cli/generate/remove-page#example","content":"For the example we will remove page form_address in feature master. gits remove-page -f master form_address  "},{"title":"Options​","type":1,"pageTitle":"Remove Page","url":"/gits_cli_documentation/docs/gits_cli/generate/remove-page#options","content":"gits remove-page [page-name] [arguments]  To see all available options and flags, run gits remove-page --help. "},{"title":"Available Options​","type":1,"pageTitle":"Remove Page","url":"/gits_cli_documentation/docs/gits_cli/generate/remove-page#available-options","content":"Specific Feature :  Specific Feature\tAlternative\tDescription-f [feature-name]\t--feature-name [feature-name]\tName of the feature to be remove page. This option is mandatory. "},{"title":"Unit Test","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/unit-test","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Unit Test","url":"/gits_cli_documentation/docs/gits_cli/generate/unit-test#options","content":"gits unit-test [arguments]  To see all available options and flags, run gits unit-test --help. "},{"title":"Available Options​","type":1,"pageTitle":"Unit Test","url":"/gits_cli_documentation/docs/gits_cli/generate/unit-test#available-options","content":"Feature (Mandatory) :  Feature\tAlternative\tDescription-f dev\t--feature-name dev\tName of the feature to be added unit-test Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. "},{"title":"Analyze","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/analyze","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Analyze","url":"/gits_cli_documentation/docs/gits_cli/project/analyze#options","content":"gits analyze [arguments]  To see all available options and flags, run gits analyze --help. "},{"title":"Available Options​","type":1,"pageTitle":"Analyze","url":"/gits_cli_documentation/docs/gits_cli/project/analyze#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. "},{"title":"Clean","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/clean","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Clean","url":"/gits_cli_documentation/docs/gits_cli/project/clean#options","content":"gits clean [arguments]  To see all available options and flags, run gits clean --help. "},{"title":"Available Options​","type":1,"pageTitle":"Clean","url":"/gits_cli_documentation/docs/gits_cli/project/clean#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. "},{"title":"Coverage","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/coverage","content":"","keywords":""},{"title":"Requirement​","type":1,"pageTitle":"Coverage","url":"/gits_cli_documentation/docs/gits_cli/project/coverage#requirement","content":"Install lcov with follow this installation info LCOV is an extension of GCOV, a GNU tool which provides information about what parts of a program are actually executed (i.e. &quot;covered&quot;) while running a particular test case. The extension consists of a set of Perl scripts which build on the textual GCOV output to implement the following enhanced functionality: * HTML based output: coverage rates are additionally indicated using bar graphs and specific colors. * Support for large projects: overview pages allow quick browsing of coverage data by providing either a hierarchical directory structure view or a three-level detail view: directory, file and source code view. LCOV was initially designed to support Linux kernel coverage measurements, but works as well for coverage measurements on standard user space applications. check your installation with run: lcov -v  or you can run command: gits doctor  "},{"title":"Usage​","type":1,"pageTitle":"Coverage","url":"/gits_cli_documentation/docs/gits_cli/project/coverage#usage","content":"This command is used to calculate our code coverage based on the tests that have been made. Code coverage will not be generated if all the tests we make have not been passed. gits coverage  caution gits coverage support for Linux and macOS. "},{"title":"Options​","type":1,"pageTitle":"Coverage","url":"/gits_cli_documentation/docs/gits_cli/project/coverage#options","content":"gits coverage [arguments]  To see all available options and flags, run gits coverage --help. "},{"title":"Available Options​","type":1,"pageTitle":"Coverage","url":"/gits_cli_documentation/docs/gits_cli/project/coverage#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. "},{"title":"Create","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/create","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Create","url":"/gits_cli_documentation/docs/gits_cli/project/create#options","content":"gits create [arguments]  To see all available options and flags, run gits create --help. "},{"title":"Available Options​","type":1,"pageTitle":"Create","url":"/gits_cli_documentation/docs/gits_cli/project/create#available-options","content":"Version Starter Kit : Version Starter Kit\tAlternative\tDescription-t [tag-version]\t--tag [tag-version]\tClone with Tag version gits flutter starter kit, default clone master Refactor Rename Gits Code : Refactor Rename Gits Code\tDescription--[no-]refactor\tRefactor rename gits name to app name --[no-]include-library\tRefactor rename gits name to app name include Gits Library use this along with argument --refactor "},{"title":"Cucumber","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/cucumber","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Cucumber","url":"/gits_cli_documentation/docs/gits_cli/project/cucumber#installation","content":"Requirement Install Flutter and another installation e.g Android Studio, Xcode. you can check in this command: flutter doctor After install Flutter then install gits_cli with command: dart pub global activate gits_cli now you can run this command to check: gits_cli doctor If this directory is missing from your PATH, locate the file for your platform and add it. Platform\tCache locationmacOS or Linux\tHOME/.pub-cache/bin Windows*\t%LOCALAPPDATA%\\Pub\\Cache\\bin Install gherkin executable and make sure to export to your PATH from this Gherkin Executable Install nodejs for generate cucumber json to report html NodeJs Congratulation now you are ready for Instant Integration Test 🎉🎉🎉 "},{"title":"How to Run​","type":1,"pageTitle":"Cucumber","url":"/gits_cli_documentation/docs/gits_cli/project/cucumber#how-to-run","content":"First connect your device to your machine or open emulator / simulator Install dependency with command: gits_cli get  Once your done installation, then run command: gits_cli cucumber  or your need to be specific feature you can do run command: gits_cli cucumber login  or multiple gits_cli cucumber login,register,home  by default run integration_test/cucumber_test.dart by flavor dev. if you want to running flavor stag or prod just add argument --flavor stag or --flavor prod example run flavor stag gits_cli cucumber --flavor stag  "},{"title":"Options​","type":1,"pageTitle":"Cucumber","url":"/gits_cli_documentation/docs/gits_cli/project/cucumber#options","content":"gits cucumber [arguments]  To see all available options and flags, run gits cucumber --help. "},{"title":"Available Options​","type":1,"pageTitle":"Cucumber","url":"/gits_cli_documentation/docs/gits_cli/project/cucumber#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tRun project on dev environment (Default) -f stag\t--flavor stag\tRun project on staging environment -f prod\t--flavor prod\tRun project on production environment "},{"title":"Local2Dart","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart","content":"","keywords":""},{"title":"Sturcture local2dart.yaml​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#sturcture-local2dartyaml","content":"version: 1 dir_database: &quot;gits&quot; foreign_key_constrain_support: true table: example_category: create_if_not_exists: true column: id: type: &quot;INTEGER&quot; constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: &quot;TEXT&quot; nullable: false example: create_if_not_exists: true column: id: type: &quot;INTEGER&quot; constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: &quot;TEXT&quot; nullable: false example_category_id: type: &quot;INTEGER&quot; nullable: false foreign: example_category_id: to_table: &quot;example_category&quot; to_column: &quot;id&quot; on_update: &quot;CASCADE&quot; on_delete: &quot;CASCADE&quot; query: table_name: custom_query_name: disticnt: boolean by default value is false column: example_id: type: &quot;INTEGER&quot; origin: &quot;id&quot; example_name: type: &quot;TEXT&quot; origin: &quot;name&quot; example_total: type: &quot;INT&quot; origin: &quot;SUM(quantity)&quot; example_count: type: &quot;INT&quot; origin: &quot;count(*)&quot; join: - &quot;INNER JOIN example ON example.id = table_name.example_id&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot; seed: status: column: - &quot;id&quot; - &quot;name&quot; value: - &quot;1,pending&quot; - &quot;2,onprogress&quot; - &quot;3,done&quot; - &quot;4,cancel&quot; view: view_name: create_if_not_exists: bool, by default is true disticnt: boolean by default value is false column: example_id: type: &quot;INTEGER&quot; origin: &quot;id&quot; example_name: type: &quot;TEXT&quot; origin: &quot;name&quot; example_total: type: &quot;INT&quot; origin: &quot;SUM(quantity)&quot; example_count: type: &quot;INT&quot; origin: &quot;count(*)&quot; from: table_name join: - &quot;INNER JOIN example ON example.id = table_name.example_id&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot; trigger: example: raw_sql: &gt; CREATE TRIGGER [IF NOT EXISTS] trigger_name [BEFORE|AFTER|INSTEAD OF] [INSERT|UPDATE|DELETE] ON table_name [WHEN condition] BEGIN statements; END;  "},{"title":"Version​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#version","content":"Determine the version of the database if you add and replace existing tables in the database, the version must be added to avoid conflicts. "},{"title":"Dir Database​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#dir-database","content":"Directory for open database by default value is gits, recommendation to replace from this database by using the project name. "},{"title":"Foreign Key Constrain Support​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#foreign-key-constrain-support","content":"SQLite has supported foreign key constraint since version 3.6.19. The SQLite library must also be compiled with neither SQLITE_OMIT_FOREIGN_KEY nor SQLITE_OMIT_TRIGGER. foreign_key_constrain_support is boolean if you set foreign_key_constrain_support true then: PRAGMA foreign_keys = ON;  otherwise PRAGMA foreign_keys = OFF;  Learn more about Foreign Key Constrain Support here "},{"title":"Table​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#table","content":"For all naming use snake_case. table: table_name: create_if_not_exists: bool, by default is true column: column_name: type: INTEGER, REAL, TEXT, BLOB, BOOL constraint: PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK (optional) autoincrement: boolean by default value is null (optional) nullable: boolean by default value is true (optional) default: Default value if insert with null (optional) foreign: column_name: to_table: references table to_column: references column on_update: constraint actions values SET NULL, SET DEFAULT, RESTRICT, NO ACTION, CASCADE (optional) on_update: constraint actions values SET NULL, SET DEFAULT, RESTRICT, NO ACTION, CASCADE (optional)  Column​ To use column_name you can use 2 ways: Directly using the data type column: id: INTEGER name: TEXT description: TEXT More specific column: id: type: INTEGER constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: TEXT nullable: false description: TEXT  You can also combine the two methods according to your needs. Foreign​ To use this foreign in the column there must be a column_name that will be used as a foreign key. column: category: create_if_not_exists: true column: id: type: &quot;INTEGER&quot; constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: &quot;TEXT&quot; nullable: false todo: create_if_not_exists: true column: id: type: &quot;INTEGER&quot; constraint: &quot;PRIMARY KEY&quot; autoincrement: true name: type: &quot;TEXT&quot; nullable: false category_id: type: &quot;INTEGER&quot; nullable: false foreign: category_id: to_table: &quot;category&quot; to_column: &quot;id&quot; on_update: &quot;CASCADE&quot; on_delete: &quot;CASCADE&quot;  "},{"title":"Query​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#query","content":"Query is used if you need a custom query other than the one provided by default from generate. Without join: query: table_name: custom_query_name: disticnt: boolean by default value is false column: id: type: &quot;INTEGER&quot; origin: &quot;id&quot; name: type: &quot;TEXT&quot; origin: &quot;name&quot; total: type: &quot;INT&quot; origin: &quot;SUM(quantity)&quot; count: type: &quot;INT&quot; origin: &quot;count(*)&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot;  With join: query: table_name: custom_query_name: disticnt: boolean by default value is false column: id: type: &quot;INTEGER&quot; origin: &quot;table_name.id&quot; example_id: type: &quot;INTEGER&quot; origin: &quot;example.id&quot; name: type: &quot;TEXT&quot; origin: &quot;table_name.name&quot; total: type: &quot;INT&quot; origin: &quot;SUM(table_name.quantity)&quot; count: type: &quot;INT&quot; origin: &quot;count(*)&quot; join: - &quot;INNER JOIN example ON example.id = table_name.example_id&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot;  In this case, the difference is if you join with another table, then in origin use the table_name. prefix to determine which column to know from which table to avoid conflicts with the same column name. "},{"title":"Seed​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#seed","content":"Seed is used if you want to create seed data when the database creation data has been inserted without having to do it manually. For example here we have a table called status and the status we want already has data when we create the database. seed: status: column: - &quot;id&quot; - &quot;name&quot; value: - &quot;1,pending&quot; - &quot;2,onprogress&quot; - &quot;3,done&quot; - &quot;4,cancel&quot;  "},{"title":"View​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#view","content":"View is used to create a view of the table, the declaration is almost the same as Query except that there is an addition of from which is used to determine from which table the data is retrieved. view: view_name: create_if_not_exists: bool, by default is true disticnt: boolean by default value is false column: example_id: type: &quot;INTEGER&quot; origin: &quot;id&quot; example_name: type: &quot;TEXT&quot; origin: &quot;name&quot; example_total: type: &quot;INT&quot; origin: &quot;SUM(quantity)&quot; example_count: type: &quot;INT&quot; origin: &quot;count(*)&quot; from: table_name join: - &quot;INNER JOIN example ON example.id = table_name.example_id&quot; where: &quot;create_at BEETWEEN ? AND ?&quot; group_by: &quot;example_id&quot; order_by: &quot;&quot; limit: 10 offset: 0 having: &quot;&quot;  "},{"title":"Trigger​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#trigger","content":"If you want to add a trigger to the database for the trigger here use raw_sql so you are more flexible in defining it. trigger: example: raw_sql: &gt; CREATE TRIGGER [IF NOT EXISTS] trigger_name [BEFORE|AFTER|INSTEAD OF] [INSERT|UPDATE|DELETE] ON table_name [WHEN condition] BEGIN statements; END;  Learn more about Trigger here "},{"title":"Result Generate​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#result-generate","content":"The result of generating local2dart will be a new module inside core/packages/local2dart, don't forget to add export 'package:local2dart/local2dart.dart'; in core/lib/core.dart. "},{"title":"Available Method in Service​","type":1,"pageTitle":"Local2Dart","url":"/gits_cli_documentation/docs/gits_cli/generate/local2dart#available-method-in-service","content":"countgetgetWithPaginationgetByIdinsertbulkInsertupsertupdatebulkUpdateupdateByIdbulkUpdateByIddeletebulkDeletedeleteByIdbulkDeleteById "},{"title":"Format","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/format","content":"Format This command is used to perform automatic .dart file formatting, where the code that we have created will be adjusted, for example by removing unused import lines and adding cons. gits format ","keywords":""},{"title":"Get","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/get","content":"Get This command gets all the dependencies listed in the pubspec.yaml file in the current working directory, as well as their transitive dependencies. gits get ","keywords":""},{"title":"Init","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/init","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Init","url":"/gits_cli_documentation/docs/gits_cli/project/init#options","content":"gits init [arguments]  To see all available options and flags, run gits init --help. "},{"title":"Available Options​","type":1,"pageTitle":"Init","url":"/gits_cli_documentation/docs/gits_cli/project/init#available-options","content":"App Name : App Name\tDescription--app-name [app-name]\tDefine application name in generate gits.yaml "},{"title":"Run","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/run","content":"","keywords":""},{"title":"Default Command​","type":1,"pageTitle":"Run","url":"/gits_cli_documentation/docs/gits_cli/project/run#default-command","content":"gits run  By default this command will run the project on the dev environment release version. "},{"title":"Options​","type":1,"pageTitle":"Run","url":"/gits_cli_documentation/docs/gits_cli/project/run#options","content":"gits run [arguments]  To see all available options and flags, run gits run --help. "},{"title":"Available Options​","type":1,"pageTitle":"Run","url":"/gits_cli_documentation/docs/gits_cli/project/run#available-options","content":"Flavor/Environment :  Flavor/Environment\tAlternative\tDescription-f dev\t--flavor dev\tRun project on dev environment (Default) -f stag\t--flavor stag\tRun project on staging environment -f prod\t--flavor prod\tRun project on production environment App Version : App Version\tDescription--debug\tRun project on debug mode (Default) --profile\tRun project on profile mode --release\tRun project on release mode (Default) Custom Target : Custom Target\tAlternative\tDescription-t [path_file]\t--target [path_file]\tThis command is used to run the application in a specific file, by default it will run the lib/main.dart file. Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. "},{"title":"Example - Custom Version​","type":1,"pageTitle":"Run","url":"/gits_cli_documentation/docs/gits_cli/project/run#example---custom-version","content":"Debug Version gits run --debug Profile Version gits run --profile Release Version gits run --release  "},{"title":"Example - Custom Environment/Flavor​","type":1,"pageTitle":"Run","url":"/gits_cli_documentation/docs/gits_cli/project/run#example---custom-environmentflavor","content":"Dev Environment gits run -f dev Alternative: gits run --flavor dev Staging Environment gits run -f stag Alternative: gits run --flavor stag Production Environment gits run -f prod Alternative: gits run --flavor prod  "},{"title":"Example - Version and Environment Combination​","type":1,"pageTitle":"Run","url":"/gits_cli_documentation/docs/gits_cli/project/run#example---version-and-environment-combination","content":"gits run --release -f stag  This following command will run your app on staging environment with release mode. "},{"title":"Example - Custom Target File​","type":1,"pageTitle":"Run","url":"/gits_cli_documentation/docs/gits_cli/project/run#example---custom-target-file","content":"gits run -t [url_file *optional]  Alternative: gits run --target [url_file *optional]  "},{"title":"Test","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/test","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Test","url":"/gits_cli_documentation/docs/gits_cli/project/test#options","content":"gits test [arguments]  To see all available options and flags, run gits test --help. "},{"title":"Available Options​","type":1,"pageTitle":"Test","url":"/gits_cli_documentation/docs/gits_cli/project/test#available-options","content":"Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. Run Spesific Feature :  Run Spesific Feature\tAlternative\tDescription-f [feature-name]\t--feature [feature-name]\tTest with spesific feature "},{"title":"Refactor","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/refactor","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Refactor","url":"/gits_cli_documentation/docs/gits_cli/project/refactor#options","content":"gits refactor --old-name [old-name] --new-name [new-name] [arguments]  To see all available options and flags, run gits refactor --help. "},{"title":"Available Options​","type":1,"pageTitle":"Refactor","url":"/gits_cli_documentation/docs/gits_cli/project/refactor#available-options","content":"Options : Options\tDescription--exclude-changes [code-exclude-changes]\tCode will exclude to refactor separate with , (coma) --exclude-files [path-files]\tSpesific path file will exclude to refactor both code and filename separate with , (coma) --exclude-directories [path-directories]\tSpesific path directory will exclude to refactor including files and codes in it separate with , (coma) Flags : Flags\tDescription--[no-]include-library\tRefactor rename gits name to app name include Gits Library, by default false "},{"title":"Upgrade","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/upgrade","content":"","keywords":""},{"title":"Options​","type":1,"pageTitle":"Upgrade","url":"/gits_cli_documentation/docs/gits_cli/project/upgrade#options","content":"gits upgrade [argument]  To see all available options and flags, run gits upgrade --help. "},{"title":"Available Options​","type":1,"pageTitle":"Upgrade","url":"/gits_cli_documentation/docs/gits_cli/project/upgrade#available-options","content":"Flag : Flag\tAlternative\tDescription-a\t--all\tUpgrade all project package's dependencies to latest versions -d\t--dependency\tUpgrade all dependency_manager package's dependencies to latest versions -g\t--gits\tUpgrade all gits_library package's dependencies to latest versions (Default) Custom Gits Yaml : Custom Gits Yaml\tDescription--gits-yaml [path_file]\tThis command is used to select yaml config the application in a specific file, by default it will run the gits.yaml file. "},{"title":"Unused-l10n","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/project/unused-l10n","content":"Unused-l10n This command aims to find the l10n key that is not used in the code. gits unused-l10n info This command only displays unused l10n keys, not to delete unused l10n keys. Output if no unused l10n key is found: Checking unused l10n 📦 Total Packages: 12 --------------------------------------- Total unused: 0 unused-l10n SUCCESS Output if an unused l10n key is found: Checking unused l10n 📦 Total Packages: 12 --------------------------------------- Total unused: 6 --------------------------- messageOnboarding1 messageOnboarding2 messageOnboarding3 titleOnboarding1 titleOnboarding2 titleOnboarding3 unused-l10n SUCCESS here the results obtained are 6 namely messageOnboarding1, messageOnboarding2, messageOnboarding3, titleOnboarding1, titleOnboarding2 &amp; titleOnboarding3. You can find out which l10n key is not used, so you can take the next action whether to delete it or use it at a later time.","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/started","content":"","keywords":""},{"title":"Requirement​","type":1,"pageTitle":"Getting Started","url":"/gits_cli_documentation/docs/gits_cli/started#requirement","content":"Dart SDK 2.19 - latestFlutter: 3.7.0 - latest note Dart SDK Installation Dart SDKFlutter SDK Installation Flutter SDK "},{"title":"IDE Recommendation​","type":1,"pageTitle":"Getting Started","url":"/gits_cli_documentation/docs/gits_cli/started#ide-recommendation","content":"VSCode "},{"title":"Installations​","type":1,"pageTitle":"Getting Started","url":"/gits_cli_documentation/docs/gits_cli/started#installations","content":"Install current version gits cli internal 3.0.0 by this command : dart pub global activate --source git https://git.gits.id/RnD/flutter-cli.git  Make sure gits cli was installed, you can check by this command : gits -v  Output Gits CLI 3.0.0  If this directory is missing from your PATH, locate the file for your platform and add it. Platform\tCache locationmacOS or Linux\tHOME/.pub-cache/bin Windows*\t%LOCALAPPDATA%\\Pub\\Cache\\bin info If you want install spesific version gits cli you need to follow this step: Clone source this from repository Gits CliCheckout to selected tag, e.g. 2.19.0Download dependency with run dart pub getInstall from localy path wtih run dart pub global activate --source path . "},{"title":"Additional Tools Installations​","type":1,"pageTitle":"Getting Started","url":"/gits_cli_documentation/docs/gits_cli/started#additional-tools-installations","content":"Install lcov for requirement command gits coverage. Install lcov with follow this installation Install gherkin for requirement command gits cucumber. Install gherkin executable and make sure to export to your PATH from this Gherkin Executable "},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/gits_cli_documentation/docs/gits_cli/started#usage","content":"To use the Gits CLI, you must run the gits command from the terminal on your project directory. caution This CLI can only be used on Gits Flutter Starter Kit, please clone it first and configure it based on the documentation on the following link Gits Flutter Starter Kit "},{"title":"Changelog","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/tools/changelog","content":"Changelog This command is used to get latest changelog from CHANGELOG.md. gits changelog CHANGELOG.md ## 1.1.0 - style: add layout featurname - feat: integrate featurename with apiname ## 1.0.1 - docs: update readme.md ## 1.0.0 - Initial version. Output - style: add layout featurname - feat: integrate featurename with apiname ","keywords":""},{"title":"Introduction (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_library/introduction","content":"Introduction (🚧 WIP)","keywords":""},{"title":"Doctor","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/gits_cli/tools/doctor","content":"Doctor This command is used to show information about the installed tooling. gits doctor Doctor check flutter doctor, lcov and gherkin installation. Output [✓] Flutter installed Doctor summary (to see all details, run flutter doctor -v): [✓] Flutter (Channel stable, 3.7.7, on macOS 13.0 22A380 darwin-arm64, locale en-ID) [✓] Android toolchain - develop for Android devices (Android SDK version 33.0.0) [✓] Xcode - develop for iOS and macOS (Xcode 14.1) [✓] Chrome - develop for the web [✓] Android Studio (version 2021.1) [✓] VS Code (version 1.76.2) [✓] Connected device (2 available) [✓] HTTP Host Availability • No issues found! [✓] Gherkin installed [✓] lcov installed ","keywords":""},{"title":"CI/CD","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/guidelines/ci_cd","content":"","keywords":""},{"title":"Summary​","type":1,"pageTitle":"CI/CD","url":"/gits_cli_documentation/docs/guidelines/ci_cd#summary","content":"Automate your software development workflows and deploy better quality code, more often. Using a continuous and iterative process to build, test, and deploy helps avoid bugs and code failures. TL;DR implemented CI/CD in GITS Flutter here "},{"title":"CI/CD explained​","type":1,"pageTitle":"CI/CD","url":"/gits_cli_documentation/docs/guidelines/ci_cd#cicd-explained","content":"CI/CD falls under DevOps (the joining of development and operations teams) and combines the practices of continuous integration and continuous delivery. CI/CD automates much or all of the manual human intervention traditionally needed to get new code from a commit into production, encompassing the build, test (including integration tests, unit tests, and regression tests), and deploy phases, as well as infrastructure provisioning. With a CI/CD pipeline, development teams can make changes to code that are then automatically tested and pushed out for delivery and deployment. Get CI/CD right and downtime is minimized and code releases happen faster. CI/CD is an essential part of DevOps and any modern software development practice. A purpose-built CI/CD platform can maximize development time by improving an organization’s productivity, increasing efficiency, and streamlining workflows through built-in automation, testing, and collaboration. As applications grow larger, the features of CI/CD can help decrease development complexity. Adopting other DevOps practices — like shifting left on security and creating tighter feedback loops — helps organizations break down development silos, scale safely, and get the most out of CI/CD. CI/CD is important because it helps development, security, and operations teams work as efficiently and effectively as possible. It decreases tedious and time-consuming manual development work and legacy approval processes, freeing DevOps teams to be more innovative in their software development. Automation makes processes predictable and repeatable so that there is less opportunity for error from human intervention. DevOps teams gain faster feedback and can integrate smaller changes frequently to reduce the risk of build-breaking changes. Making DevOps processes continuous and iterative speeds software development lifecycles so organizations can ship more features that customers love. "},{"title":"What is continuous integration (CI)?​","type":1,"pageTitle":"CI/CD","url":"/gits_cli_documentation/docs/guidelines/ci_cd#what-is-continuous-integration-ci","content":"Continuous integration is the practice of integrating all your code changes into the main branch of a shared source code repository early and often, automatically testing each change when you commit or merge them, and automatically kicking off a build. With continuous integration, errors and security issues can be identified and fixed more easily, and much earlier in the development process. By merging changes frequently and triggering automatic testing and validation processes, you minimize the possibility of code conflict, even with multiple developers working on the same application. A secondary advantage is that you don't have to wait long for answers and can, if necessary, fix bugs and security issues while the topic is still fresh in your mind. Common code validation processes start with a static code analysis that verifies the quality of the code. Once the code passes the static tests, automated CI routines package and compile the code for further automated testing. CI processes should have a version control system that tracks changes so you know the version of the code used. "},{"title":"What is continuous delivery (CD)?​","type":1,"pageTitle":"CI/CD","url":"/gits_cli_documentation/docs/guidelines/ci_cd#what-is-continuous-delivery-cd","content":"Continuous delivery is a software development practice that works in conjunction with CI to automate the infrastructure provisioning and application release process. Once code has been tested and built as part of the CI process, CD takes over during the final stages to ensure it’s packaged with everything it needs to deploy to any environment at any time. CD can cover everything from provisioning the infrastructure to deploying the application to the testing or production environment. With CD, the software is built so that it can be deployed to production at any time. Then you can trigger the deployments manually or move to continuous deployment, where deployments are automated as well. "},{"title":"What is continuous deployment?​","type":1,"pageTitle":"CI/CD","url":"/gits_cli_documentation/docs/guidelines/ci_cd#what-is-continuous-deployment","content":"Continuous deployment enables organizations to deploy their applications automatically, eliminating the need for human intervention. With continuous deployment, DevOps teams set the criteria for code releases ahead of time and when those criteria are met and validated, the code is deployed into the production environment. This allows organizations to be more nimble and get new features into the hands of users faster. While you can do continuous integration without continuous delivery or deployment, you can’t really do CD without already having CI in place. That’s because it would be extremely difficult to be able to deploy to production at any time if you aren’t practicing CI fundamentals like integrating code to a shared repo, automating testing and builds, and doing it all in small batches on a daily basis. "},{"title":"What is continuous testing?​","type":1,"pageTitle":"CI/CD","url":"/gits_cli_documentation/docs/guidelines/ci_cd#what-is-continuous-testing","content":"Continuous testing is a software testing practice where tests are continuously run in order to identify bugs as soon as they are introduced into the codebase. In a CI/CD pipeline, continuous testing is typically performed automatically, with each code change triggering a series of tests to ensure that the application is still working as expected. This can help to identify problems early in the development process and prevent them from becoming more difficult and costly to fix later on. Continuous testing can also provide valuable feedback to developers about the quality of their code, helping them to identify and address potential issues before they are released to production. In continuous testing, various types of tests are performed within the CI/CD pipeline. These can include: Unit testing, which checks that individual units of code work as expectedIntegration testing, which verifies how different modules or services within an application work togetherRegression testing, which is performed after a bug is fixed to ensure that specific bug won't occur again "},{"title":"CI/CD fundamentals​","type":1,"pageTitle":"CI/CD","url":"/gits_cli_documentation/docs/guidelines/ci_cd#cicd-fundamentals","content":"There are eight fundamental elements of CI/CD that help ensure maximum efficiency for your development lifecycle. They span development and deployment. Include these fundamentals in your pipeline to improve your DevOps workflow and software delivery: A single source repository Source code management (SCM) that houses all necessary files and scripts to create builds is critical. The repository should contain everything needed for the build. This includes source code, database structure, libraries, properties files, and version control. It should also contain test scripts and scripts to build applications.Frequent check-ins to main branch Integrate code in your trunk, mainline or master branch — i.e., trunk-based development — early and often. Avoid sub-branches and work with the main branch only. Use small segments of code and merge them into the branch as frequently as possible. Don't merge more than one change at a time.Automated builds Scripts should include everything you need to build from a single command. This includes web server files, database scripts, and application software. The CI processes should automatically package and compile the code into a usable application.Self-testing builds CI/CD requires continuous testing. Testing scripts should ensure that the failure of a test results in a failed build. Use static pre-build testing scripts to check code for integrity, quality, and security compliance. Only allow code that passes static tests into the build.Frequent iterations Multiple commits to the repository results in fewer places for conflicts to hide. Make small, frequent iterations rather than major changes. By doing this, it's possible to roll changes back easily if there's a problem or conflict.Stable testing environments Code should be tested in a cloned version of the production environment. You can't test new code in the live production version. Create a cloned environment that's as close as possible to the real environment. Use rigorous testing scripts to detect and identify bugs that slipped through the initial pre-build testing process.Maximum visibility Every developer should be able to access the latest executables and see any changes made to the repository. Information in the repository should be visible to all. Use version control to manage handoffs so developers know which is the latest version. Maximum visibility means everyone can monitor progress and identify potential concerns.Predictable deployments anytime Deployments should be so routine and low-risk that the team is comfortable doing them anytime. CI/CD testing and verification processes should be rigorous and reliable, giving the team confidence to deploy updates at any time. Frequent deployments incorporating limited changes also pose lower risks and can be easily rolled back. "},{"title":"The benefits of CI/CD implementationThe benefits of CI/CD implementation​","type":1,"pageTitle":"CI/CD","url":"/gits_cli_documentation/docs/guidelines/ci_cd#the-benefits-of-cicd-implementationthe-benefits-of-cicd-implementation","content":"Companies and organizations that adopt CI/CD tend to notice a lot of positive changes. Here are some of the benefits you can look forward to as you implement CI/CD: Happier users and customers: Fewer bugs and errors make it into production, so your users and customers have a better experience. This leads to improved levels of customer satisfaction, improved customer confidence, and a better reputation for your organization.Accelerated time-to-value: When you can deploy any time, you can bring products and new features to market faster. Your development costs are lower, and a faster turnaround frees your team for other work. Customers get results faster, giving your company a competitive edge.Less fire fighting: Testing code more often, in smaller batches, and earlier in the development cycle can seriously cut down on fire drills. This results in a smoother development cycle and less team stress. Results are more predictable, and it's easier to find and fix bugs.Hit dates more reliably: Removing deployment bottlenecks and making deployments predictable can remove a lot of the uncertainty around hitting key dates. Breaking work into smaller, manageable bites means it's easier to complete each stage on time and track progress. This approach gives plenty of time to monitor overall progress and determine completion dates more accurately.Free up developers’ time: With more of the deployment process automated, the team has time for more rewarding projects. It's estimated that developers spend between 35% and 50% of their time testing, validating, and debugging code. By automating these processes, developers significantly improve their productivity.Less context switching: Getting real-time feedback on their code makes it easier for developers to work on one thing at a time and minimizes their cognitive load. By working with small sections of code that are automatically tested, developers can debug code quickly while their minds are still fresh from programming. Finding bugs is easier because there's less code to review.Reduce burnout: Research shows that CD measurably reduces deployment pain and team burnout. Developers experience less frustration and strain when working with CI/CD processes. This leads to happier and healthier employees and less burnout.Recover faster: CI/CD makes it easier to fix issues and recover from incidents, reducing mean time to resolution (MTTR). Continuous deployment practices mean frequent small software updates so when bugs appear, it's easier to pin them down. Developers have the option of fixing bugs quickly or rolling back the change so that the customer can get back to work quickly. "},{"title":"References​","type":1,"pageTitle":"CI/CD","url":"/gits_cli_documentation/docs/guidelines/ci_cd#references","content":"https://about.gitlab.com/topics/ci-cd/ "},{"title":"Coding Guidelines","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/guidelines/coding_guidelines","content":"","keywords":""},{"title":"Summary​","type":1,"pageTitle":"Coding Guidelines","url":"/gits_cli_documentation/docs/guidelines/coding_guidelines#summary","content":"In general, at GITS Indonesia, we use existing style guides such as those from Dart and Flutter itself. "},{"title":"Style Guide​","type":1,"pageTitle":"Coding Guidelines","url":"/gits_cli_documentation/docs/guidelines/coding_guidelines#style-guide","content":"Effective Dart: Style, follow the Effective Dart: StyleLinter, follow the Linter RulesPerformance, follow the Performance Best Practice "},{"title":"Conventional Commits​","type":1,"pageTitle":"Coding Guidelines","url":"/gits_cli_documentation/docs/guidelines/coding_guidelines#conventional-commits","content":"All projects must follow conventional commits. Learn more about conventional commits here "},{"title":"Innovation Idea","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/guidelines/innovation_idea","content":"Innovation Idea Local Database ✅ Buat generator untuk local database untuk mempermudah pengerjakan fitur local tanpa effort lebih. Done: lihat lebih detail di local2dart CI/CD iOS Different Flavor ✅ Issue terjadi di ios ketika running ci/cd berbeda flavor masih memerlukan pengeditan manual via xcode pada fastlane &amp; project.pbxproj pada bagian bundle id &amp; provosioning profile sehingga tidak dinamis. Done: lihat lebih detail di prebuild ios Simple Route Buat route yang sekarang menjadi lembih simple untuk digunakan, karena saat ini route yang kita gunakan cukup complek dan tricky untuk digunakan. Remove flutter_local_notifications in gits_inspector Saat ini gits_inspector masih memiliki dependency ke flutter_local_notifications terjadi issue jika project yang kita kerjakan menggunakan dependency yang sama hal ini akan terjadi double init dan terjadi issue karena flutter_local_notifications merupakan singleton dan tidak bisa dibedakan instancenya. Solusinya buat notification yang standalone untuk gits_inspector tanpa ada dependency ke flutter_local_notifications / dependency notification lainnya.","keywords":""},{"title":"Conventional Commits 1.0.0","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/guidelines/conventional_commit","content":"","keywords":""},{"title":"Summary​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#summary","content":"The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages. The commit message should be structured as follows: &lt;type&gt;[optional scope]: &lt;description&gt; [optional body] [optional footer(s)]  The commit contains the following structural elements, to communicate intent to the consumers of your library: fix: a commit of the type fix patches a bug in your codebase (this correlates with PATCH in Semantic Versioning).feat: a commit of the type feat introduces a new feature to the codebase (this correlates with MINOR in Semantic Versioning).BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in Semantic Versioning). A BREAKING CHANGE can be part of commits of any type.types other than fix: and feat: are allowed, for example @commitlint/config-conventional (based on the Angular convention) recommends build:, 3. 3. chore:, ci:, docs:, style:, refactor:, perf:, test:, and others.footers other than BREAKING CHANGE: \\&lt;description&gt; may be provided and follow a convention similar to git trailer format. Additional types are not mandated by the Conventional Commits specification, and have no implicit effect in Semantic Versioning (unless they include a BREAKING CHANGE). A scope may be provided to a commit’s type, to provide additional contextual information and is contained within parenthesis, e.g., feat(parser): add ability to parse arrays. "},{"title":"Examples​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#examples","content":""},{"title":"Commit message with description and breaking change footer​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#commit-message-with-description-and-breaking-change-footer","content":"feat: allow provided config object to extend other configs BREAKING CHANGE: `extends` key in config file is now used for extending other config files  "},{"title":"Commit message with ! to draw attention to breaking change​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#commit-message-with--to-draw-attention-to-breaking-change","content":"feat!: send an email to the customer when a product is shipped  "},{"title":"Commit message with scope and ! to draw attention to breaking change​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#commit-message-with-scope-and--to-draw-attention-to-breaking-change","content":"feat(api)!: send an email to the customer when a product is shipped  "},{"title":"Commit message with both ! and BREAKING CHANGE footer​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#commit-message-with-both--and-breaking-change-footer","content":"chore!: drop support for Node 6 BREAKING CHANGE: use JavaScript features not available in Node 6.  "},{"title":"Commit message with no body​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#commit-message-with-no-body","content":"docs: correct spelling of CHANGELOG  "},{"title":"Commit message with scope​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#commit-message-with-scope","content":"feat(lang): add Polish language  "},{"title":"Commit message with multi-paragraph body and multiple footers​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#commit-message-with-multi-paragraph-body-and-multiple-footers","content":"fix: prevent racing of requests Introduce a request id and a reference to latest request. Dismiss incoming responses other than from latest request. Remove timeouts which were used to mitigate the racing issue but are obsolete now. Reviewed-by: Z Refs: #123  "},{"title":"Specification​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#specification","content":"The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Commits MUST be prefixed with a type, which consists of a noun, feat, fix, etc., followed by the OPTIONAL scope, OPTIONAL !, and REQUIRED terminal colon and space.The type feat MUST be used when a commit adds a new feature to your application or library.The type fix MUST be used when a commit represents a bug fix for your application.A scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., fix(parser):A description MUST immediately follow the colon and space after the type/scope prefix. The description is a short summary of the code changes, e.g., fix: array parsing issue when multiple spaces were contained in string.A longer commit body MAY be provided after the short description, providing additional contextual information about the code changes. The body MUST begin one blank line after the description.A commit body is free-form and MAY consist of any number of newline separated paragraphs.One or more footers MAY be provided one blank line after the body. Each footer MUST consist of a word token, followed by either a :\\&lt;space&gt; or \\&lt;space&gt;# separator, followed by a string value (this is inspired by the git trailer convention).A footer’s token MUST use - in place of whitespace characters, e.g., Acked-by (this helps differentiate the footer section from a multi-paragraph body). An exception is made for BREAKING CHANGE, which MAY also be used as a token.A footer’s value MAY contain spaces and newlines, and parsing MUST terminate when the next valid footer token/separator pair is observed.Breaking changes MUST be indicated in the type/scope prefix of a commit, or as an entry in the footer.If included as a footer, a breaking change MUST consist of the uppercase text BREAKING CHANGE, followed by a colon, space, and description, e.g., BREAKING CHANGE: environment variables now take precedence over config files.If included in the type/scope prefix, breaking changes MUST be indicated by a ! immediately before the :. If ! is used, BREAKING CHANGE: MAY be omitted from the footer section, and the commit description SHALL be used to describe the breaking change.Types other than feat and fix MAY be used in your commit messages, e.g., docs: update ref docs.The units of information that make up Conventional Commits MUST NOT be treated as case sensitive by implementors, with the exception of BREAKING CHANGE which MUST be uppercase.BREAKING-CHANGE MUST be synonymous with BREAKING CHANGE, when used as a token in a footer. "},{"title":"Why Use Conventional Commits​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#why-use-conventional-commits","content":"Automatically generating CHANGELOGs.Automatically determining a semantic version bump (based on the types of commits landed).Communicating the nature of changes to teammates, the public, and other stakeholders.Triggering build and publish processes.Making it easier for people to contribute to your projects, by allowing them to explore a more structured commit history. "},{"title":"References​","type":1,"pageTitle":"Conventional Commits 1.0.0","url":"/gits_cli_documentation/docs/guidelines/conventional_commit#references","content":"https://www.conventionalcommits.org/en/v1.0.0/ "},{"title":"Integration","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/guidelines/integration","content":"","keywords":""},{"title":"Integration Taiga with Gitlab​","type":1,"pageTitle":"Integration","url":"/gits_cli_documentation/docs/guidelines/integration#integration-taiga-with-gitlab","content":"Taiga\tGitlab\t For the guideline integrating Taiga with Gitlab, you can check here "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/guidelines/introduction","content":"","keywords":""},{"title":"What Are Coding Rules and Guidelines?​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/guidelines/introduction#what-are-coding-rules-and-guidelines","content":"Coding rules and guidelines ensure that software is: Safe: It can be used without causing harm.Secure: It can’t be hacked.Reliable: It functions as it should, every time.Testable: It can be tested at the code level.Maintainable: It can be maintained, even as your codebase grows.Portable: It works the same in every environment. "},{"title":"Purpose of Having Coding Standards​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/guidelines/introduction#purpose-of-having-coding-standards","content":"A coding standard gives a uniform appearance to the codes written by different engineers.It improves readability, and maintainability of the code and it reduces complexity also.It helps in code reuse and helps to detect error easily.It promotes sound programming practices and increases efficiency of the programmers. "},{"title":"Advantages of Coding Guidelines​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/guidelines/introduction#advantages-of-coding-guidelines","content":"Coding guidelines increase the efficiency of the software and reduces the development time.Coding guidelines help in detecting errors in the early phases, so it helps to reduce the extra cost incurred by the software project.If coding guidelines are maintained properly, then the software code increases readability and understandability thus it reduces the complexity of the code.It reduces the hidden cost for developing the software. "},{"title":"References​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/guidelines/introduction#references","content":"https://www.geeksforgeeks.org/coding-standards-and-guidelines/ "},{"title":"Trunk Based Development","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/guidelines/trunk_based_development","content":"","keywords":""},{"title":"Summary​","type":1,"pageTitle":"Trunk Based Development","url":"/gits_cli_documentation/docs/guidelines/trunk_based_development#summary","content":"A source-control branching model, where developers collaborate on code in a single branch called ‘trunk’ *, resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after. main for the Git community since 2020 (master with unsavory connotations before) "},{"title":"Shared branches off mainline/main/trunk are bad at any release cadence​","type":1,"pageTitle":"Trunk Based Development","url":"/gits_cli_documentation/docs/guidelines/trunk_based_development#shared-branches-off-mainlinemaintrunk-are-bad-at-any-release-cadence","content":" "},{"title":"Trunk-Based Development For Smaller Teams​","type":1,"pageTitle":"Trunk Based Development","url":"/gits_cli_documentation/docs/guidelines/trunk_based_development#trunk-based-development-for-smaller-teams","content":" "},{"title":"Scaled Trunk-Based Development​","type":1,"pageTitle":"Trunk Based Development","url":"/gits_cli_documentation/docs/guidelines/trunk_based_development#scaled-trunk-based-development","content":" "},{"title":"Elaboration, Claims and Caveats​","type":1,"pageTitle":"Trunk Based Development","url":"/gits_cli_documentation/docs/guidelines/trunk_based_development#elaboration-claims-and-caveats","content":" Trunk-Based Development is a key enabler of Continuous Integration and by extension Continuous Delivery. When individuals on a team are committing their changes to the trunk multiple times a day it becomes easy to satisfy the core requirement of Continuous Integration that all team members commit to trunk at least once every 24 hours. This ensures the codebase is always releasable on demand and helps to make Continuous Delivery a reality. The dividing line between small team Trunk-Based Development and scaled Trunk-Based Development is a subject to team size and commit rate consideration. The precise moment a dev team is no longer “small” and has transitioned to “scaled” is subject to practitioner debate. Regardless, teams perform a full “pre integrate” build (compile, unit tests, integration tests) on their dev workstations before committing/pushing for others (or bots) to see. "},{"title":"References​","type":1,"pageTitle":"Trunk Based Development","url":"/gits_cli_documentation/docs/guidelines/trunk_based_development#references","content":"https://trunkbaseddevelopment.com/ "},{"title":"Assets","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/assets","content":"","keywords":""},{"title":"Usages​","type":1,"pageTitle":"Assets","url":"/gits_cli_documentation/docs/starter_kit/assets#usages","content":"Here are the steps for creating a logo.png image file as an example: Add the logo files to the assets/assets/images/ folder Generate constants with the Gits CLI command: gits assets Learn more about command assets here The logo constant will be generated in the core/assets/lib/gits_images.dart file info Adjust the placement of the assets that we use Image file path assets/assets/images/ constant will be generated in the file core/assets/lib/gits_images.dartThe file path icon assets/assets/icons/ constant will be generated in the file core/assets/lib/gits_icons.dartThe path of the json file assets/assets/json/ constant will be generated in the file core/assets/lib/gits_json.dart Now you can use GitsImages.logo in your code Image.asset(GitsImages.logo);  "},{"title":"Authorization (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/authorization","content":"Authorization (🚧 WIP)","keywords":""},{"title":"Changelog","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/changelog","content":"","keywords":""},{"title":"3.0.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#300","content":"feat(integration_test): add integration test with gits cucumberfeat(core): add new function in gits text fieldfix(core): pop result go router extensionsfeat(core): add debouncer for debounce textfieldbuild: bump upgrade dependencyfeat(main)!: break change routest with implemented shell routeschore(json2dart): add sample header and config in json2dart "},{"title":"2.5.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#250","content":"fix(core): export int date_symbol_data_local and hide TextDirection from export intlci: add build apk and ipa for qa and notification to slackfeat: add main_driver.dart for integration test purpose "},{"title":"2.4.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#241","content":"remove unused directory exampleupdate documentation readme.mdci: remove unused before_script in gitslab-ci.ymlrefactor(asset): rename gits logo name "},{"title":"2.4.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#240","content":"update dependency and remove deprecated filechange runner to m1upgrade kotlin version to 1.8.0 and gradle version to 7.4.0fix path provisioning make to general purposeupgrade minimum ios to 11 "},{"title":"2.3.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#231","content":"update docs readmechange command gits to gits_cli "},{"title":"2.3.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#230","content":"add component GitsText, GitsTextRichadd component GitsShimmer, GitsItemShimmeradd component GitsSliverSpacingadd component GitsSliverListSeparated, GitsColumnSeparated, GitsRowSeparatedrefactor component to atomic designadd config json2dartrefactor regenerate json2dart with gits_cli 2.13.0 cache strategyfix gits_theme for text theme "},{"title":"2.2.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#220","content":"ci: update fastlane &amp; .gitlab-ci separate stage build and deploy and modify notification slackrefactor(core): make variable global to separate filefeat(core): update dependency in dependency manager &amp; gits libraryfix(splash): make set navigation state gits inspector from navigatorKey globalfix(main): add dispose for page controllerfeat(routes): add navigatorKey from global variabefeat(main): add scaffoldMessageKey from global variable and make simple define routerfix(root): remove unused dependency cupertino_iconsfix(core): make static version for go_router: 5.1.10fix(android): upgrade gradle to 7.1.2 "},{"title":"2.1.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#210","content":"remove platform webremove platform windowsseparate assets from coreupgrade most dependency in dependency manager &amp; gits libraryadd default config format date time in json2dartadd new example main page "},{"title":"2.0.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#200","content":"upgrade cicd flutter sdk to 3.3refactor to flutter 3.3remove directory .docsadd environment isNotDev, isNotStag &amp; isNotProdadd initial show gits inspector in locatorupgrade some package to latest in dependency managerupgrade all package to latest in gits library "},{"title":"1.9.2​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#192","content":"refactor generated json2dart with gits cli 2.3.1add ignore directory .symbols "},{"title":"1.9.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#191","content":"change compile sdk android to 33generated json2dart with gits cli 2.3.0generated assets with gits cli 2.3.0 "},{"title":"1.9.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#190","content":"add json2dart auto generate api "},{"title":"1.8.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#181","content":"add register test presentationadd login test presentationadd forgot password test presentation "},{"title":"1.8.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#180","content":"add notification to slack after build &amp; deploy success "},{"title":"1.7.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#170","content":"fix ci/cd build ios dev, stag &amp; prod to testflight.add fastlane ios "},{"title":"1.6.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#160","content":"fix ci/cd build android dev &amp; stag.add fastlane androidadd ci/cd android prod deploy to playstore "},{"title":"1.5.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#150","content":"add ci/cd for starter kit. "},{"title":"1.4.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#141","content":"fix: test feature main &amp; splash.chore: ignore .vscode file. "},{"title":"1.4.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#140","content":"Feat/upgrade depedency. "},{"title":"1.3.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#131","content":"feat: update version gits extension depedency. "},{"title":"1.3.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#130","content":"Feat/add firebase config. "},{"title":"1.2.2​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#122","content":"Feat/update depedency gits library. "},{"title":"1.2.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#121","content":"feat: update depedency version gits library. "},{"title":"1.2.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#120","content":"Feat/option gits http. "},{"title":"1.1.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#110","content":"Feat/add widget test. "},{"title":"1.0.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#101","content":"fix(gits_library): change dependency from private git to public pub.dev. "},{"title":"1.0.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#100","content":"Feat/gits library. "},{"title":"0.4.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#040","content":"feat(gits_inspector): add share gits inspector in detail. "},{"title":"0.3.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#030","content":"Feat/gits inspector. "},{"title":"0.2.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#021","content":"docs: change flavor documentation from new gits cli. "},{"title":"0.2.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#020","content":"Feat/new gits cli. "},{"title":"0.1.0​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#010","content":"Feat/add customization in gits http. "},{"title":"0.0.3​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#003","content":"chore(gits_cli): add gits cli for add new api in page. "},{"title":"0.0.2​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#002","content":"docs(readme): add documentation in readme. "},{"title":"0.0.1​","type":1,"pageTitle":"Changelog","url":"/gits_cli_documentation/docs/starter_kit/changelog#001","content":"Initial version. "},{"title":"Coverage (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/coverage","content":"Coverage (🚧 WIP)","keywords":""},{"title":"Concepts","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/concepts","content":"","keywords":""},{"title":"Tech Stack​","type":1,"pageTitle":"Concepts","url":"/gits_cli_documentation/docs/starter_kit/concepts#tech-stack","content":"GITS Flutter Starter Kit built using the following major dependencies: Gits CLIGits BaseGits HTTPGits InspectorGits ExtensionGoogle FontsFlutter BlocGo RouterGet ItFlutter Secure StorageShimmerCached Network ImageEquatableLoggerCollectionFirebaseMocktailBloc Test "},{"title":"Folder Structure​","type":1,"pageTitle":"Concepts","url":"/gits_cli_documentation/docs/starter_kit/concepts#folder-structure","content":"Overall Folder Structure . ├── android # Android native directory ├── assets # Module assets │ ├── assets # Assets directory │ ├── lib # Assets source code directory ├── core # Module core │ ├── lib │ │ ├── src │ │ │ ├── components # Global components │ │ │ ├── constants # Global constants │ │ │ ├── extensions # Global extensions │ │ │ ├── firebase # Firebase helper │ │ │ ├── helper # Global helper │ │ │ ├── l10n # Localization (generated with gits l10n) │ │ │ ├── shared # Global shared class │ │ │ ├── test # Global helper test │ │ │ ├── themes # Global themes style │ │ │ ├── environment.dart # Environment data from --dart-define │ │ │ ├── global_variable.dart # Global variable may used in feature module │ │ │ ├── locator.dart # Service locator core │ │ ├── core_test.dart # Identity library core test │ │ ├── core.dart # Identity library core │ ├── packages │ │ ├── dependency_manager # Module global dependencies │ │ ├── gits_library # Specific dependencies from gits_library │ ├── test # Core unit test &amp; widget test ├── features # Modules feature directory │ ├── auth # Auth's modules (example) │ ├── home # Home's modules (example) ├── firebase # Firebase directory │ ├── dev # Firebase dev flavor │ │ ├── google-services.json # google services dev for android │ │ ├── GoogleService-Info.plist # google services dev for ios │ ├── stag # Firebase stag flavor │ │ ├── google-services.json # google services stag for android │ │ ├── GoogleService-Info.plist # google services stag for ios │ ├── prod # Firebase prod flavor │ │ ├── google-services.json # google services prod for android │ │ ├── GoogleService-Info.plist # google services prod for ios ├── ios # iOS native directory ├── json2dart # Json2dart directory │ ├── json │ │ ├── body # Parameter body api in json │ │ ├── response # Response api in json │ ├── json2dart.yaml # Main file to control generate json2dart ├── lib │ ├── main │ │ ├── main_page.dart # Main pages │ ├── routes # Routes with Go Router │ ├── locator.dart # Routes with Go Router │ ├── main.dart # Service locator main (auto generated) ├── gits.yaml # Main environtment variable └── ...  Feature Folder Structure (Example) ┌── ... ├── features # Modules feature directory │ ├── auth # Auth's modules (example) │ │ ├── lib │ │ │ ├── login # Login's page (example) │ │ │ │ ├── data # Data layer │ │ │ │ │ ├── datasources # Datasource implementation (auto generated) │ │ │ │ │ ├── models # Data model body and response (auto generated) │ │ │ │ │ ├── repositories # Implementation repositories (auto generated) │ │ │ │ ├── domain # Domain layer │ │ │ │ │ ├── entities # Entity take from response (auto generated) │ │ │ │ │ ├── repositories # Contract repositories (auto generated) │ │ │ │ │ ├── usecases # Usecase implementation (auto generated) │ │ │ │ ├── presentation # Presentation layer │ │ │ │ │ ├── bloc # Implementation bloc for fetch api (auto generated) │ │ │ │ │ ├── cubit # Controller with Cubit │ │ │ │ │ ├── pages # Pages directory │ │ │ │ │ ├── widgets # Widgets directory for login page │ │ │ │ ├── locator.dart # Service locator login page (auto generated) │ │ │ │ ├── mapper.dart # Mapper models to entities vice versa (auto generated) │ │ │ ├── locator.dart # Service locator auth (auto generated) │ │ ├── test # Auth's unit test &amp; widget test └── ...  "},{"title":"Config (gits.yaml)​","type":1,"pageTitle":"Concepts","url":"/gits_cli_documentation/docs/starter_kit/concepts#config-gitsyaml","content":"Like the .env gits.yaml aims to save the config environment will be ignored and keep secret only the team in the project has the right to get the gits.yaml. "},{"title":"Core​","type":1,"pageTitle":"Concepts","url":"/gits_cli_documentation/docs/starter_kit/concepts#core","content":"The core module is a reusable code that is used in all features. Core module has additional dependencies on packages: Dependency Manage : All third party dependency except Gits LibraryGits Library : Dependency from Gits "},{"title":"Internationalization​","type":1,"pageTitle":"Concepts","url":"/gits_cli_documentation/docs/starter_kit/concepts#internationalization","content":"Internationalization location in assets/assets/l10n and will generated to core/lib/src/l10n with official tools flutter gen-l10n and simplied with Gits CLI command gits l10n. Learn more about Internationalization here "},{"title":"Pattern​","type":1,"pageTitle":"Concepts","url":"/gits_cli_documentation/docs/starter_kit/concepts#pattern","content":"BLoC PatternClean ArchitectureTDD PatternSolid Pattern "},{"title":"Dependency Manager (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/dependency_manager","content":"Dependency Manager (🚧 WIP)","keywords":""},{"title":"Deployment (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/deployment","content":"Deployment (🚧 WIP)","keywords":""},{"title":"Feature","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/feature","content":"","keywords":""},{"title":"Generate Feature​","type":1,"pageTitle":"Feature","url":"/gits_cli_documentation/docs/starter_kit/feature#generate-feature","content":"To generate features you can follow these steps: gits feature [feature_name]  for the example we will generate a new feature named master gits feature master  The feature master folder will be created automatically, we can check in features/master/  caution The feature will not be generated if the feature name we enter already exists. Learn more about gits feature here "},{"title":"What is Generated​","type":1,"pageTitle":"Feature","url":"/gits_cli_documentation/docs/starter_kit/feature#what-is-generated","content":"Feature Master Folder Structure ┌── ... ├── features # Modules feature directory │ ├── ... │ ├── master # Master's modules │ │ ├── lib │ │ │ ├── locator.dart # Service locator master (auto generated, not allow to editable) │ │ ├── test │ │ │ ├── .gitkeep # Keep this directory in repository │ │ ├── .gitignore │ │ ├── .metadata │ │ ├── analysis_options.yaml │ │ ├── CHANGELOG.md │ │ ├── LICENSE │ │ ├── pubspec.yaml │ │ ├── README.md └── ... Auto add dependency in main pubspec.yaml pubspec.yaml name: gits_flutter_starter_kit description: A new Flutter project. publish_to: &quot;none&quot; version: 2.5.0+1 environment: sdk: &quot;&gt;=2.17.0 &lt;3.0.0&quot; dependencies: flutter: sdk: flutter core: path: ./core splash: path: ./features/splash onboarding: path: ./features/onboarding auth: path: ./features/auth home: path: ./features/home news: path: ./features/news profile: path: ./features/profile selling: path: ./features/selling master: # Added this generate path: ./features/master # Added this generate dev_dependencies: integration_test: sdk: flutter flutter_test: sdk: flutter flutter_lints: ^2.0.1 gits_cucumber: ^1.2.1 flutter: uses-material-design: true assets: - integration_test/ndjson/ Auto add setupLocatorFeature in lib/locator.dart // // Generated file. Edit just you manually add or delete a feature. // import 'package:auth/locator.dart'; import 'package:core/core.dart'; import 'package:home/locator.dart'; import 'package:master/locator.dart'; import 'package:news/locator.dart'; import 'package:onboarding/locator.dart'; import 'package:profile/locator.dart'; import 'package:selling/locator.dart'; import 'routes/routes.dart'; void setupLocator() { locator.registerLazySingleton(() =&gt; Routes.router); setupLocatorFeatureCore(); setupLocatorFeatureAuth(); setupLocatorFeatureOnboarding(); setupLocatorFeatureHome(); setupLocatorFeatureNews(); setupLocatorFeatureProfile(); setupLocatorFeatureSelling(); setupLocatorFeatureMaster(); // Added this generate }  "},{"title":"Firebase (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/firebase","content":"Firebase (🚧 WIP)","keywords":""},{"title":"Internationalization (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/internationalization","content":"Internationalization (🚧 WIP)","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/introduction","content":"","keywords":""},{"title":"What is GITS Flutter Starter Kit?​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/starter_kit/introduction#what-is-gits-flutter-starter-kit","content":"GITS Flutter Starter Kit is base starter template powered with Gits CLI that used in GITS Indonesia. It's built on top of Flutter 3.7 with Modular Architecture. "},{"title":"Goals​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/starter_kit/introduction#goals","content":"The main purpose of making a starter kit is to prepare project templates that are ready to use without rebuilding from scratch. Also, the starter kit must be: Easy to get startedHighly customizableSpeed up the development processArchitectural standardizationEasy to maintainIncluded with ready-to-use UI ComponentWell documented "},{"title":"Technologies​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/starter_kit/introduction#technologies","content":"The core of this starter is must run with Gits CLI "},{"title":"Gits CLI​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/starter_kit/introduction#gits-cli","content":"One of the mandatory requirements to be installed on your machine is to run a Flutter project using a starter kit plus there are powerful features that can help speed up the development process with the help of generating code from the Gits CLI. Learn more about Gits CLI here "},{"title":"Gits Library​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/starter_kit/introduction#gits-library","content":"Gits Base​ GitsBase is base for UI project include state management with cubit &amp; hydrated. Learn more about Gits Base here Gits HTTP​ Future-based library for making HTTP requests modified from http package. Learn more about Gits HTTP here Gits Inspector​ A simple in-app for GitsHttp inspector. Intercepts and persists all HTTP requests and responses inside your application, and provides a UI for inspecting their content.. Learn more about Gits Inspector here Gits Extension​ Superpowers for Dart. Collection of useful static extension methods. Learn more about Gits Extension here "},{"title":"Other Dependencies​","type":1,"pageTitle":"Introduction","url":"/gits_cli_documentation/docs/starter_kit/introduction#other-dependencies","content":"Here are list of dependencies that also used on this project. Google FontsFlutter BlocGo RouterGet ItFlutter Secure StorageShimmerCached Network ImageEquatableLoggerCollectionFirebaseMocktailBloc Test "},{"title":"Json2dart (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/json2dart","content":"Json2dart (🚧 WIP)","keywords":""},{"title":"Middleware (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/middleware","content":"Middleware (🚧 WIP)","keywords":""},{"title":"Environment (gits.yaml)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/environment","content":"","keywords":""},{"title":"Summary​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#summary","content":"gits.yaml is the config environment used by the gits flutter starter kit, developers are required to do run gits init or copy the existing gits.yaml file. keep gits.yaml secret and ignore dare repository. gits.yaml project_name: Gits flavor: dev: FLAVOR: dev APP_NAME: Gits Dev ANDROID_APPLICATION_ID: id.gits.example.dev IOS_APPLICATION_ID: id.gits.example.dev BASE_URL: https://reqres.in/api stag: FLAVOR: stag APP_NAME: Gits Stag ANDROID_APPLICATION_ID: id.gits.example.stag IOS_APPLICATION_ID: id.gits.example.stag BASE_URL: https://reqres.in/api prod: FLAVOR: prod APP_NAME: Gits ANDROID_APPLICATION_ID: id.gits.example IOS_APPLICATION_ID: id.gits.example BASE_URL: https://reqres.in/api localization: arb_dir: assets/assets/l10n template_arb_file: id.arb output_localization_file: s.dart output_class: S output_dir: core/lib/src/l10n replace: false firebase: google_service_dev_dir: firebase/dev google_service_stag_dir: firebase/stag google_service_prod_dir: firebase/prod output_android_dir: android/app output_ios_dir: ios assets: pubspec_dir: assets assets_dir: assets/assets output_dir: assets/lib create_library_file: true coverage: lcov_dir: coverage/lcov.info output_html_dir: coverage/html remove: - &quot;*/mock/*&quot; - &quot;*.freezed.*&quot; - &quot;*.g.*&quot; - &quot;*/l10n/*&quot; - &quot;*_state.dart&quot; - &quot;*_event.dart&quot; - &quot;**/locator.dart&quot; - &quot;**/environtment.dart&quot; - &quot;core/lib/src/test/*&quot; - &quot;core/lib/src/constants/*&quot; - &quot;core/lib/src/themes/*&quot; - &quot;lib/routes/routes.dart&quot; - &quot;lib/generated_plugin_registrant.dart&quot;  "},{"title":"Project Name​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#project-name","content":"project_name will be used in some generators for naming files, classes and variables. project_name's default value is Gits "},{"title":"Example Default (Gits)​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#example-default-gits","content":"gits.yaml ... project_name: Gits ...  example to generate assets if we use default or Gits for project_name then we run command gits assets, we see file generated like this: Folder Structure . ├── assets │ ├── assets │ │ ├── images │ │ │ ├── example.png │ ├── lib │ │ ├── src │ │ │ ├── gits_images.dart # filename generate will prefix gits └── ...  assets/lib/src/gits_images.dart abstract class GitsImages { // Prefix class name with gits // ignore: unused_field static const String _assets = 'packages/assets/assets/images'; static const String example = '$_assets/example.png'; }  "},{"title":"Example Custom (Example)​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#example-custom-example","content":"gits.yaml ... project_name: Example ...  example to generate assets if we use default or Gits for project_name then we run command gits assets, we see file generated like this: Folder Structure . ├── assets │ ├── assets │ │ ├── images │ │ │ ├── example.png │ ├── lib │ │ ├── src │ │ │ ├── example_images.dart # filename generate will prefix example └── ...  assets/lib/src/example_images.dart abstract class ExampleImages { // Prefix class name with example // ignore: unused_field static const String _assets = 'packages/assets/assets/images'; static const String example = '$_assets/example.png'; }  "},{"title":"List Usages​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#list-usages","content":"For more information on the use of project_name, see the following list: Assets or CLI gits assetsJson2dart or CLI gits json2dartCLI gits configCLI gits endpointCLI gits apiCLI gits unit-test "},{"title":"Flavor​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#flavor","content":"Flavor has 3 variants dev, stag and prod, each of the variants has the same key but the value can be different from one another. Keys that are FLAVOR, APP_NAME, ANDROID_APPLICATION_ID and IOS_APPLICATION_ID used on Android and iOS natively. The way it works is that the flavor will be changed to the --dart-define in cli argument which is used during run or build. ... flavor: dev: FLAVOR: dev # Mandatory APP_NAME: Gits Dev # Mandatory ANDROID_APPLICATION_ID: id.gits.example.dev # Mandatory IOS_APPLICATION_ID: id.gits.example.dev # Mandatory BASE_URL: https://reqres.in/api stag: FLAVOR: stag # Mandatory APP_NAME: Gits Stag # Mandatory ANDROID_APPLICATION_ID: id.gits.example.stag # Mandatory IOS_APPLICATION_ID: id.gits.example.stag # Mandatory BASE_URL: https://reqres.in/api prod: FLAVOR: prod # Mandatory APP_NAME: Gits # Mandatory ANDROID_APPLICATION_ID: id.gits.example # Mandatory IOS_APPLICATION_ID: id.gits.example # Mandatory BASE_URL: https://reqres.in/api ...  "},{"title":"Usages​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#usages","content":"Flutter​ core/lib/scr/environment.dart class Environment { static const bool isDev = String.fromEnvironment('FLAVOR') == 'dev'; static const bool isNotDev = String.fromEnvironment('FLAVOR') != 'dev'; static const bool isStag = String.fromEnvironment('FLAVOR') == 'stag'; static const bool isNotStag = String.fromEnvironment('FLAVOR') != 'stag'; static const bool isProd = String.fromEnvironment('FLAVOR') == 'prod'; static const bool isNotProd = String.fromEnvironment('FLAVOR') != 'prod'; static const String baseUrl = String.fromEnvironment('BASE_URL'); }  Android​ To get dart define from argument on android add in android/app/build.gradle android/app/build.gradle ... def dartEnvironmentVariables = [] if (project.hasProperty('dart-defines')) { dartEnvironmentVariables = project.property('dart-defines') .split(',') .collectEntries { entry -&gt; def pair = new String(entry.decodeBase64(), 'UTF-8').split('=') [(pair.first()): pair.last()] } } android { ... defaultConfig { applicationId dartEnvironmentVariables.APPLICATION_ID // Take from dart define minSdkVersion minSdk targetSdkVersion targetSdk versionCode flutterVersionCode.toInteger() versionName flutterVersionName resValue &quot;string&quot;, &quot;app_name&quot;, dartEnvironmentVariables.APP_NAME // Take from dart define multiDexEnabled = true } }  iOS​ To get the dart define of the arguments on ios add a pre-action to the scheme runner  # Type a script or drag a script file from your workspace to insert its path. function entry_decode() { echo &quot;${*}&quot; | base64 --decode; } IFS=',' read -r -a define_items &lt;&lt;&lt; &quot;$DART_DEFINES&quot; for index in &quot;${!define_items[@]}&quot; do define_items[$index]=$(entry_decode &quot;${define_items[$index]}&quot;); done printf &quot;%s\\n&quot; &quot;${define_items[@]}&quot; &gt; ${SRCROOT}/Flutter/DartDefined.xcconfig  Then in Debug.xcconfig &amp; Release.xcconfig add this #include &quot;DartDefined.xcconfig&quot;  Example usage on ios in Info.plist: &lt;key&gt;CFBundleDisplayName&lt;/key&gt; &lt;string&gt;${APP_NAME}&lt;/string&gt;  "},{"title":"Localization / Internationalization​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#localization--internationalization","content":"gits.yaml ... localization: arb_dir: assets/assets/l10n template_arb_file: id.arb output_localization_file: s.dart output_class: S output_dir: core/lib/src/l10n replace: false ...  "},{"title":"Configuring localization in gits.yaml file​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#configuring-localization-in-gitsyaml-file","content":"Option\tDescriptionarb-dir\tThe directory where the template and translated arb files are located. template-arb-file\tThe template arb file that is used as the basis for generating the Dart localization and messages files. output-localization-file\tThe filename for the output localization and localizations delegate classes. output-dir\tThe directory where the generated localization classes are written. This option is only relevant if you want to generate the localizations code somewhere else in the Flutter project. You also need to set the synthetic-package flag to false. The app must import the file specified in the output-localization-file option from this directory. If unspecified, this defaults to the same directory as the input directory specified in arb-dir. replace\tAllow you to replace and merge with default each root .arb if you use separate folder e.g en.arb will be maintained from generate. by default is false Learn more about Internationalization here "},{"title":"Firebase​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#firebase","content":"gits.yaml ... firebase: google_service_dev_dir: firebase/dev google_service_stag_dir: firebase/stag google_service_prod_dir: firebase/prod output_android_dir: android/app output_ios_dir: ios ...  "},{"title":"Configuring firebase in gits.yaml file​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#configuring-firebase-in-gitsyaml-file","content":"Option\tDescriptiongoogle_service_dev_dir\tThe directory where the google service environment dev are located. google_service_stag_dir\tThe directory where the google service environment stag are located. google_service_prod_dir\tThe directory where the google service environment prod are located. output_android_dir\tThe directory where output the google service to copy for android. output_ios_dir\tThe directory where output the google service to copy for ios. Learn more about Firebase here "},{"title":"Assets​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#assets","content":"gits.yaml ... assets: pubspec_dir: assets assets_dir: assets/assets output_dir: assets/lib create_library_file: true ...  "},{"title":"Configuring assets in gits.yaml file​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#configuring-assets-in-gitsyaml-file","content":"Option\tDescriptionpubspec_dir\tThe directory where the module assets are located. assets_dir\tThe directory where the assets are located. assets_dir\tThe directory where the assets are located. output-dir\tThe directory where the generated localization classes are written. create_library_file\tAllow to generated file dart library with export file-filed generated. Learn more about Assets here "},{"title":"Coverage​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#coverage","content":"gits.yaml ... coverage: lcov_dir: coverage/lcov.info output_html_dir: coverage/html remove: - &quot;*/mock/*&quot; - &quot;*.freezed.*&quot; - &quot;*.g.*&quot; - &quot;*/l10n/*&quot; - &quot;*_state.dart&quot; - &quot;*_event.dart&quot; - &quot;**/locator.dart&quot; - &quot;**/environtment.dart&quot; - &quot;core/lib/src/test/*&quot; - &quot;core/lib/src/constants/*&quot; - &quot;core/lib/src/themes/*&quot; - &quot;lib/routes/routes.dart&quot; - &quot;lib/generated_plugin_registrant.dart&quot; ...  "},{"title":"Configuring coverage in gits.yaml file​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#configuring-coverage-in-gitsyaml-file","content":"Option\tDescriptionlcov_dir\tThe directory where the lcov.info are located. output_html_dir\tThe directory where output the generated report html are written. remove\tIgnore or remove pattern dir / file support glob from calculate coverage. Learn more about Coverage here "},{"title":"References​","type":1,"pageTitle":"Environment (gits.yaml)","url":"/gits_cli_documentation/docs/starter_kit/environment#references","content":"https://medium.com/@tatsu.ukraine/flutter-2-2-dart-defines-and-breaking-changes-here-we-go-again-ce40cfea74fdhttps://medium.com/flutter-community/how-to-setup-dart-define-for-keys-and-secrets-on-android-and-ios-in-flutter-apps-4f28a10c4b6c "},{"title":"Page (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/page","content":"Page (🚧 WIP)","keywords":""},{"title":"Refresh Token (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/refresh_token","content":"Refresh Token (🚧 WIP)","keywords":""},{"title":"Service Locator (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/service_locator","content":"Service Locator (🚧 WIP)","keywords":""},{"title":"Routes (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/routes","content":"Routes (🚧 WIP)","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/started","content":"","keywords":""},{"title":"Requirement​","type":1,"pageTitle":"Getting Started","url":"/gits_cli_documentation/docs/starter_kit/started#requirement","content":"Dart SDK 2.19 - latestFlutter: 3.7.0 - latest note Dart SDK Installation Dart SDKFlutter SDK Installation Flutter SDK "},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/gits_cli_documentation/docs/starter_kit/started#installation","content":"Install Gits CLI Create new project with run command: gits create my-app To see all available options and flags, run gits create --help or check in here. Run your emulator or connect your device Now you can run apps in VS Code with press F5 or you can run via terminal with command: gits run To see all available options and flags, run gits run --help or check in here. info If you want install manually you need to follow this step: Clone source this from repository Gits Flutter Starter Kit # via SSH git clone git@git.gits.id:RnD/fluttergits.git # via HTTPS git clone https://git.gits.id/RnD/fluttergits.git my-app Remove the .git folder and initialize the new one. cd my-app rm -rf .git git init git commit -am &quot;initial commit&quot; Init configuration gits init gits config Install the dependencies gits get Run your emulator or connect your device Now you can run apps in VS Code with press F5 or you can run via terminal with command: gits run To see all available options and flags, run gits run --help or check in here. "},{"title":"State Management (BLoC) (🚧 WIP)","type":0,"sectionRef":"#","url":"/gits_cli_documentation/docs/starter_kit/state_management","content":"State Management (BLoC) (🚧 WIP)","keywords":""}]